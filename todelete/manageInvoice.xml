<?xml version="1.0" encoding="UTF-8"?>
<ManageInvoiceRequest xmlns:common="http://schemas.nav.gov.hu/NTCA/1.0/common" xmlns="http://schemas.nav.gov.hu/OSA/3.0/api">
	<common:header>
		<common:requestId>RID181837288942</common:requestId>
		<common:timestamp>2020-09-11T12:44:55.442Z</common:timestamp>
		<common:requestVersion>3.0</common:requestVersion>
		<common:headerVersion>1.0</common:headerVersion>
	</common:header>
	<common:user>
		<common:login>lwilsmn0uqdxe6u</common:login>
		<common:passwordHash cryptoType="SHA-512">2F43840A882CFDB7DB0FEC07D419D030D864B47B6B541DC280EF81B937B7A176E33C052B0D26638CC18A7A2C08D8D311733078A774BF43F6CA57FE8CD74DC28E</common:passwordHash>
		<common:taxNumber>11111111</common:taxNumber>
		<common:requestSignature cryptoType="SHA3-512">A111DD79CAE8E76EAD02E4E7C2D0C866292E50EDDF38D3E7312F1B950B53C08CBBFE12AD07DA10FB1876597DF49F2B6B7A9932B28933728B2E5E29AD05D20EED</common:requestSignature>
		<!--<signKey>ac-ac3a-7f661bff7d342N43CYX4U9FG</signKey>-->
		<!--<firstIndexHash>41DB40243BFA1E80FE2DC0E8E28D1041CFC663BB31C4E65989BA8725FCFFF7A192FFFEBA299A1FD9C16A7CEE11981BA2D37AD6BFF4B1DB4C3D43DF863BD6CC7E</firstIndexHash>-->
		<!--<secondIndexHash>94F8A2941BCCF88AA3EF6AC323D74146C1C4B243C181CDE373F1937753AE5F9361B23C5F41470D9444D5606DBA86241361F69C5DF3AF60A3C2CAF7ADD30E8C11</secondIndexHash>-->
		<!--<thirdIndexHash>9CEF0DA1FB6548DC474DCD9F760138E4019FD97B47C3D0DA794221C2DF37EE83F3F4835939B767337932ACCB84177B3F2C2947E03B0BF188AE103D1A9526F920</thirdIndexHash>-->
	</common:user>
	<software>
		<softwareId>123456789123456789</softwareId>
		<softwareName>string</softwareName>
		<softwareOperation>LOCAL_SOFTWARE</softwareOperation>
		<softwareMainVersion>string</softwareMainVersion>
		<softwareDevName>string</softwareDevName>
		<softwareDevContact>string</softwareDevContact>
		<softwareDevCountryCode>HU</softwareDevCountryCode>
		<softwareDevTaxNumber>string</softwareDevTaxNumber>
	</software>
	<exchangeToken>b1aca173-d9e8-4561-9237-0511eed99eaa2P0ZHLXBRI2U</exchangeToken>
	<invoiceOperations>
		<compressedContent>false</compressedContent>
		<invoiceOperation>
			<index>1</index>
			<invoiceOperation>CREATE</invoiceOperation>
			<invoiceData>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPEludm9pY2VEYXRhIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5uYXYuZ292Lmh1L09TQS8zLjAvZGF0YSIgeG1sbnM6bnMyPSJodHRwOi8vc2NoZW1hcy5uYXYuZ292Lmh1L09TQS8zLjAvYmFzZSI+CiAgIDxpbnZvaWNlTnVtYmVyPjAzMjgwMTU1MDc5Mjk0MzEyODgyPC9pbnZvaWNlTnVtYmVyPgogICA8aW52b2ljZUlzc3VlRGF0ZT4yMDIwLTA5LTA0PC9pbnZvaWNlSXNzdWVEYXRlPgogICA8Y29tcGxldGVuZXNzSW5kaWNhdG9yPnRydWU8L2NvbXBsZXRlbmVzc0luZGljYXRvcj4KICAgPGludm9pY2VNYWluPgogICAgICA8aW52b2ljZT4KICAgICAgICAgPGludm9pY2VIZWFkPgogICAgICAgICAgICA8c3VwcGxpZXJJbmZvPgogICAgICAgICAgICAgICA8c3VwcGxpZXJUYXhOdW1iZXI+CiAgICAgICAgICAgICAgICAgIDxuczI6dGF4cGF5ZXJJZD40ODI1ODAzNjwvbnMyOnRheHBheWVySWQ+CiAgICAgICAgICAgICAgICAgIDxuczI6dmF0Q29kZT41PC9uczI6dmF0Q29kZT4KICAgICAgICAgICAgICAgICAgPG5zMjpjb3VudHlDb2RlPjUxPC9uczI6Y291bnR5Q29kZT4KICAgICAgICAgICAgICAgPC9zdXBwbGllclRheE51bWJlcj4KICAgICAgICAgICAgICAgPGdyb3VwTWVtYmVyVGF4TnVtYmVyPgogICAgICAgICAgICAgICAgICA8bnMyOnRheHBheWVySWQ+NDQ0NDQ0NDQ8L25zMjp0YXhwYXllcklkPgogICAgICAgICAgICAgICAgICA8bnMyOnZhdENvZGU+NDwvbnMyOnZhdENvZGU+CiAgICAgICAgICAgICAgICAgIDxuczI6Y291bnR5Q29kZT41MTwvbnMyOmNvdW50eUNvZGU+CiAgICAgICAgICAgICAgIDwvZ3JvdXBNZW1iZXJUYXhOdW1iZXI+CiAgICAgICAgICAgICAgIDxjb21tdW5pdHlWYXROdW1iZXI+QVMxNjUxNDE5MzwvY29tbXVuaXR5VmF0TnVtYmVyPgogICAgICAgICAgICAgICA8c3VwcGxpZXJOYW1lPndNZ0xHcVRyRVR6UkhYdmhWc2V2TWljUlRlS3JrbmJjUm5NbG5qem13dmpYbW9meHBuUVdJb0lYcVlNRlNvc2xjbWdQZ2JvWW5CbFprV1ZGQ1lMWWpGZWV4RkJSeFN5TVZEa2pnbGZoa3BsclRNWEZveGV3T1JrVFlicmtiVnp3TGJaTlJYTFhNYU1lbmJEZXJJT2Zud3N4QUNVTUt1SkRrQ1F4UmpxSk9DS1VtdWF4VnhtZ3FwRnRzbHl0a2djWmtISld5RFZETWhSaWR5cUpuVFhMYXh4UEZpV29zaVBRcnlsckVoZG1aY0JOQk5BY093bnprR3pyVHBGV0xJUXdidktoQ1NDc0pDeFd4dlFaSmNmcGZLZk9ieWhWelJ0Rnprb25iR3ZjQ29CcGFVa1hDbnhpbWxXUmhsRGVqT0tNbU5oWW1td0hXSk9zc0pMSkNGTmRuSW1GZ0ZoVEZFQ3duSVptWWhSYU5lVU1rcUFsWkNTSkFRRnhWbWVaZ1hYaGxNTHFZVXNzalJwY2FZU05hQXZKeElsUWF6enFyTlRHdFZGWFFzekdERVJGa2ZqV1J3b0ZBS3h5Y3dOZGpacVhkUmhvbEFhZkdacld0VVdLdXVwYWhaWklzdVdueXlCVVBjblh4VHZVTEZ5WEZTSW12WENGS05ocHhCUW9vckRIPC9zdXBwbGllck5hbWU+CiAgICAgICAgICAgICAgIDxzdXBwbGllckFkZHJlc3M+CiAgICAgICAgICAgICAgICAgIDxuczI6ZGV0YWlsZWRBZGRyZXNzPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmNvdW50cnlDb2RlPkhVPC9uczI6Y291bnRyeUNvZGU+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6cmVnaW9uPkLDqWvDqXM8L25zMjpyZWdpb24+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6cG9zdGFsQ29kZT41NjAwPC9uczI6cG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpjaXR5PktRb2ZoU1YxcjhWdmt0QzlEYzhvSnFoWERxcjJYTTwvbnMyOmNpdHk+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RyZWV0TmFtZT53eFJsSlhxemd3ajdJSHVNZ0t5MjFVNmtjNFd0eXI8L25zMjpzdHJlZXROYW1lPgogICAgICAgICAgICAgICAgICAgICA8bnMyOnB1YmxpY1BsYWNlQ2F0ZWdvcnk+S0ptckRaWkpvcTwvbnMyOnB1YmxpY1BsYWNlQ2F0ZWdvcnk+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6bnVtYmVyPjQ3PC9uczI6bnVtYmVyPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmJ1aWxkaW5nPkJCPC9uczI6YnVpbGRpbmc+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RhaXJjYXNlPjk5PC9uczI6c3RhaXJjYXNlPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmZsb29yPjE8L25zMjpmbG9vcj4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpkb29yPjM1PC9uczI6ZG9vcj4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpsb3ROdW1iZXI+MjUyNTc2PC9uczI6bG90TnVtYmVyPgogICAgICAgICAgICAgICAgICA8L25zMjpkZXRhaWxlZEFkZHJlc3M+CiAgICAgICAgICAgICAgIDwvc3VwcGxpZXJBZGRyZXNzPgogICAgICAgICAgICAgICA8c3VwcGxpZXJCYW5rQWNjb3VudE51bWJlcj4xMTExMTExMS0xMTExMTExMS0xMTExMTExMTwvc3VwcGxpZXJCYW5rQWNjb3VudE51bWJlcj4KICAgICAgICAgICAgICAgPGluZGl2aWR1YWxFeGVtcHRpb24+ZmFsc2U8L2luZGl2aWR1YWxFeGVtcHRpb24+CiAgICAgICAgICAgICAgIDxleGNpc2VMaWNlbmNlTnVtPkc3enhySURrTWNyRjZsTW1YUUFkN3RQOXZFUGVtcGRSOG5JcU5aMnI4ejRtRlBqUEpQPC9leGNpc2VMaWNlbmNlTnVtPgogICAgICAgICAgICA8L3N1cHBsaWVySW5mbz4KICAgICAgICAgICAgPGN1c3RvbWVySW5mbz4KICAgICAgICAgICAgICAgPHByaXZhdGVQZXJzb25JbmRpY2F0b3I+ZmFsc2U8L3ByaXZhdGVQZXJzb25JbmRpY2F0b3I+CiAgICAgICAgICAgICAgIDxjdXN0b21lclZhdERhdGE+CiAgICAgICAgICAgICAgICAgIDxjdXN0b21lclRheE51bWJlcj4KICAgICAgICAgICAgICAgICAgICAgPG5zMjp0YXhwYXllcklkPjIyMjIyMjIyPC9uczI6dGF4cGF5ZXJJZD4KICAgICAgICAgICAgICAgICAgICAgPG5zMjp2YXRDb2RlPjE8L25zMjp2YXRDb2RlPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmNvdW50eUNvZGU+NTE8L25zMjpjb3VudHlDb2RlPgogICAgICAgICAgICAgICAgICA8L2N1c3RvbWVyVGF4TnVtYmVyPgogICAgICAgICAgICAgICA8L2N1c3RvbWVyVmF0RGF0YT4KICAgICAgICAgICAgICAgPGN1c3RvbWVyTmFtZT5tZGlKWUJUc0hCbXRRYVpVc3d3dUxSZ091c2RCY054Z1RKbGZ5akVPRlJOWnRQVllXSHZLQWVTU3NrU3FWRFR0bEhMY21Za1hUb2hXeFZjc2RacElEc1ZmTk9vaGVnc3FiYkVVUWpWUFlTaHpMcUlreVByRW16RHNTeHFPeVdRU0pOVGFRVmdHYkxnWXFDV0ZsTHpFRVRpRVNjd3hIY0J1WlJlYm1xY1FZeVVWQmZDSHFGWEt2UmVMUmhlcFdwQmZkZENBd2ZLYnd0TGpuZHB5UGNWaXZBTnhnaldBUlBmY2VRSEZFbmpIbEF3b1hTaENzeUV6alFVbW1haUhva0NJbW9OcERMWk5qRnhMbGxmeXBlZEZNc2NCZ21NeHZ2Q2dGREZLTllhYUhlcE5uR3NhZ2psUFluTGZ6WnN1a3plbEVLdGFnenRrclRCWXBVUUVtTHVKbUhTQ0hXZU1zclJabHNOVEhvQm1kSkpjZm9XaXN4YUxWZW9HZXF2YnpkQVVBTGJxSmxISmtYZWZvU1FOTFp5WFVHRUxRZVBxSExGbWhxWEVEV1RLdlp1ZVhhWmJucm9WbVRPSHZ0emlDQXptdVBFQUJYbkdMTk1kQUhEQ3RRUWt6ZlNCWHdLS0pqd0ZFTmNQeGhDekV2Y0ZFdkRhZlVxemRHdHV6WUprUmt6dDwvY3VzdG9tZXJOYW1lPgogICAgICAgICAgICAgICA8Y3VzdG9tZXJBZGRyZXNzPgogICAgICAgICAgICAgICAgICA8bnMyOmRldGFpbGVkQWRkcmVzcz4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpjb3VudHJ5Q29kZT5IVTwvbnMyOmNvdW50cnlDb2RlPgogICAgICAgICAgICAgICAgICAgICA8bnMyOnJlZ2lvbj5Cw6lrw6lzPC9uczI6cmVnaW9uPgogICAgICAgICAgICAgICAgICAgICA8bnMyOnBvc3RhbENvZGU+NTYwMDwvbnMyOnBvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6Y2l0eT5Bc2dnWEJuZjUzWHNjYXBuVWRTcDQ1UkhOcTZNdFU8L25zMjpjaXR5PgogICAgICAgICAgICAgICAgICAgICA8bnMyOnN0cmVldE5hbWU+MGhBVU5HSXowRUVUc3pCd0l3dUdyNlI0SWd1ZTNwPC9uczI6c3RyZWV0TmFtZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpwdWJsaWNQbGFjZUNhdGVnb3J5PldsUHFkbG1hSk48L25zMjpwdWJsaWNQbGFjZUNhdGVnb3J5PgogICAgICAgICAgICAgICAgICAgICA8bnMyOm51bWJlcj40MzwvbnMyOm51bWJlcj4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpidWlsZGluZz5CQjwvbnMyOmJ1aWxkaW5nPgogICAgICAgICAgICAgICAgICAgICA8bnMyOnN0YWlyY2FzZT45OTwvbnMyOnN0YWlyY2FzZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpmbG9vcj40PC9uczI6Zmxvb3I+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6ZG9vcj40MTwvbnMyOmRvb3I+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6bG90TnVtYmVyPjEwNTEzNzwvbnMyOmxvdE51bWJlcj4KICAgICAgICAgICAgICAgICAgPC9uczI6ZGV0YWlsZWRBZGRyZXNzPgogICAgICAgICAgICAgICA8L2N1c3RvbWVyQWRkcmVzcz4KICAgICAgICAgICAgICAgPGN1c3RvbWVyQmFua0FjY291bnROdW1iZXI+MTExMTExMTEtMTExMTExMTEtMjIyMjIyMjI8L2N1c3RvbWVyQmFua0FjY291bnROdW1iZXI+CiAgICAgICAgICAgIDwvY3VzdG9tZXJJbmZvPgogICAgICAgICAgICA8ZmlzY2FsUmVwcmVzZW50YXRpdmVJbmZvPgogICAgICAgICAgICAgICA8ZmlzY2FsUmVwcmVzZW50YXRpdmVUYXhOdW1iZXI+CiAgICAgICAgICAgICAgICAgIDxuczI6dGF4cGF5ZXJJZD41NTU1NTU1NTwvbnMyOnRheHBheWVySWQ+CiAgICAgICAgICAgICAgIDwvZmlzY2FsUmVwcmVzZW50YXRpdmVUYXhOdW1iZXI+CiAgICAgICAgICAgICAgIDxmaXNjYWxSZXByZXNlbnRhdGl2ZU5hbWU+YW9yOEx1d1ZnRHFkZDN5T1dPY2JTdEtPSkJGMXNyPC9maXNjYWxSZXByZXNlbnRhdGl2ZU5hbWU+CiAgICAgICAgICAgICAgIDxmaXNjYWxSZXByZXNlbnRhdGl2ZUFkZHJlc3M+CiAgICAgICAgICAgICAgICAgIDxuczI6ZGV0YWlsZWRBZGRyZXNzPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmNvdW50cnlDb2RlPkhVPC9uczI6Y291bnRyeUNvZGU+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6cmVnaW9uPkLDqWvDqXM8L25zMjpyZWdpb24+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6cG9zdGFsQ29kZT41NjAwPC9uczI6cG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpjaXR5PnluRXBsbnJBS3lDekNUbm9ucGtYTlJGRGg1cGp2QzwvbnMyOmNpdHk+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RyZWV0TmFtZT5VVTNPcnE2bnpuRndFakt4QUhxZWJZaVJZRmhzQko8L25zMjpzdHJlZXROYW1lPgogICAgICAgICAgICAgICAgICAgICA8bnMyOnB1YmxpY1BsYWNlQ2F0ZWdvcnk+OGdzUjhMQnpSUTwvbnMyOnB1YmxpY1BsYWNlQ2F0ZWdvcnk+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6bnVtYmVyPjI2PC9uczI6bnVtYmVyPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmJ1aWxkaW5nPkJCPC9uczI6YnVpbGRpbmc+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RhaXJjYXNlPjk5PC9uczI6c3RhaXJjYXNlPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmZsb29yPjg8L25zMjpmbG9vcj4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpkb29yPjI5PC9uczI6ZG9vcj4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpsb3ROdW1iZXI+MTQyNTYwPC9uczI6bG90TnVtYmVyPgogICAgICAgICAgICAgICAgICA8L25zMjpkZXRhaWxlZEFkZHJlc3M+CiAgICAgICAgICAgICAgIDwvZmlzY2FsUmVwcmVzZW50YXRpdmVBZGRyZXNzPgogICAgICAgICAgICA8L2Zpc2NhbFJlcHJlc2VudGF0aXZlSW5mbz4KICAgICAgICAgICAgPGludm9pY2VEZXRhaWw+CiAgICAgICAgICAgICAgIDxpbnZvaWNlQ2F0ZWdvcnk+Tk9STUFMPC9pbnZvaWNlQ2F0ZWdvcnk+CiAgICAgICAgICAgICAgIDxpbnZvaWNlRGVsaXZlcnlEYXRlPjIwMjAtMDktMDQ8L2ludm9pY2VEZWxpdmVyeURhdGU+CiAgICAgICAgICAgICAgIDxpbnZvaWNlRGVsaXZlcnlQZXJpb2RTdGFydD4yMDIwLTA5LTA0PC9pbnZvaWNlRGVsaXZlcnlQZXJpb2RTdGFydD4KICAgICAgICAgICAgICAgPGludm9pY2VEZWxpdmVyeVBlcmlvZEVuZD4yMDIwLTA5LTA0PC9pbnZvaWNlRGVsaXZlcnlQZXJpb2RFbmQ+CiAgICAgICAgICAgICAgIDxpbnZvaWNlQWNjb3VudGluZ0RlbGl2ZXJ5RGF0ZT4yMDIwLTA5LTA0PC9pbnZvaWNlQWNjb3VudGluZ0RlbGl2ZXJ5RGF0ZT4KICAgICAgICAgICAgICAgPHBlcmlvZGljYWxTZXR0bGVtZW50PnRydWU8L3BlcmlvZGljYWxTZXR0bGVtZW50PgogICAgICAgICAgICAgICA8c21hbGxCdXNpbmVzc0luZGljYXRvcj50cnVlPC9zbWFsbEJ1c2luZXNzSW5kaWNhdG9yPgogICAgICAgICAgICAgICA8Y3VycmVuY3lDb2RlPlBUUjwvY3VycmVuY3lDb2RlPgogICAgICAgICAgICAgICA8ZXhjaGFuZ2VSYXRlPjE8L2V4Y2hhbmdlUmF0ZT4KICAgICAgICAgICAgICAgPHV0aWxpdHlTZXR0bGVtZW50SW5kaWNhdG9yPmZhbHNlPC91dGlsaXR5U2V0dGxlbWVudEluZGljYXRvcj4KICAgICAgICAgICAgICAgPHNlbGZCaWxsaW5nSW5kaWNhdG9yPmZhbHNlPC9zZWxmQmlsbGluZ0luZGljYXRvcj4KICAgICAgICAgICAgICAgPHBheW1lbnRNZXRob2Q+Q0FTSDwvcGF5bWVudE1ldGhvZD4KICAgICAgICAgICAgICAgPHBheW1lbnREYXRlPjIwMjAtMDktMDQ8L3BheW1lbnREYXRlPgogICAgICAgICAgICAgICA8Y2FzaEFjY291bnRpbmdJbmRpY2F0b3I+dHJ1ZTwvY2FzaEFjY291bnRpbmdJbmRpY2F0b3I+CiAgICAgICAgICAgICAgIDxpbnZvaWNlQXBwZWFyYW5jZT5FTEVDVFJPTklDPC9pbnZvaWNlQXBwZWFyYW5jZT4KICAgICAgICAgICAgICAgPGFkZGl0aW9uYWxJbnZvaWNlRGF0YT4KICAgICAgICAgICAgICAgICAgPGRhdGFOYW1lPkExMjM0NV9BU0RBU0RBU0Q8L2RhdGFOYW1lPgogICAgICAgICAgICAgICAgICA8ZGF0YURlc2NyaXB0aW9uPmFxWlR4OVRhZ2EyUklSRVVTU01iMlF6SXAxN25EMDg2aGJPU2hMUGxWVzNpUDhQc0oweENpaUpnVjFrUjZPVDNoQ2tDR0JWQXd2bnp2Um5YTTI3Z2dkTTBWUjltZDdCN05Jejc1bmpybVdLVldkZUF1QnRWcjZTYm9TbVN4enpuV0lBVktqQkFKTTY0blM2Vkw4T1YydFZiVENKUVZ2N3hudVNHR0VuOWFPZ3Z4QVlqdUt6cUFrOFZVWTBwZ2w3TEpKMXVicGw5Njd1MVZXY1BJMXlZTEs2UXoxZEdJVjg4b3Y2V2ZEQ0xGb0hWSFZKd0VwVE5TQVVKZncwVThBcTwvZGF0YURlc2NyaXB0aW9uPgogICAgICAgICAgICAgICAgICA8ZGF0YVZhbHVlPkVoTWhlOUFmV2xNY1o1bFltWnU4S2hDeEJ1RGtLTDhBYUk1OVIxdUJTaHhMUnl6eUpBUTdlSXd5N0FWMWxYNHFMWmZQZ1FhM0M2eVVYbDJWMXZQeFVhenVpN0dUWFB0U3Rtb3I0cjU2Wkc2bnlRYXRzaVNQcEUxRnFoYUplMlVMd0l3bWVtOGlPdFhMNktmNjIwbkxySFpIcjRhZ0hFaGlQV3JxRUxiUU1IY1M1QzhSNFkwY0hXSWlseGdCVDBrbDNveWtmTFIyVzN3QThFWWk2eXVqeTBDcGJlbEFJa2V0ZFhBT3c2U25sTU1HOXVKd1V4bFlZSFdNd3ZlenpYbjFKVWZRTXZhQlprck5vSUJYS3lPUE1ZbEhCdzRmOE8zczVvMGUweEs1OVJvdE5pR0ZJc3B2ZjVnc1k3Z2J1UlRSYmZubk5zb25PRElPQ0tXa1JmWUNkbFYzTURKZkxIZ1ZCTnZpRHFmQmNmbjF5dFhPdHEzNU5NbzNuZ1I1TWp3azNRWkdpbERuVXN5VUlmcjZDYVlqTWt3N29LbHVqaUlGR2lsV3hvc3lwY3FKeFFDWUdnMDFaeVNBWjY1RXJsUkl1R1hJRVJ5VXV6RERQSEFrdDdESFJTYm1VWGtzTTZlNUQ0MGI3ZmF6Y1RVYlZvSlBNY3JmNjR1NjlzOXZ6SUpVPC9kYXRhVmFsdWU+CiAgICAgICAgICAgICAgIDwvYWRkaXRpb25hbEludm9pY2VEYXRhPgogICAgICAgICAgICA8L2ludm9pY2VEZXRhaWw+CiAgICAgICAgIDwvaW52b2ljZUhlYWQ+CiAgICAgICAgIDxpbnZvaWNlTGluZXM+CiAgICAgICAgICAgIDxtZXJnZWRJdGVtSW5kaWNhdG9yPmZhbHNlPC9tZXJnZWRJdGVtSW5kaWNhdG9yPgogICAgICAgICAgICA8bGluZT4KICAgICAgICAgICAgICAgPGxpbmVOdW1iZXI+MTwvbGluZU51bWJlcj4KICAgICAgICAgICAgICAgPGFkdmFuY2VEYXRhPgogICAgICAgICAgICAgICAgICA8YWR2YW5jZUluZGljYXRvcj50cnVlPC9hZHZhbmNlSW5kaWNhdG9yPgogICAgICAgICAgICAgICA8L2FkdmFuY2VEYXRhPgogICAgICAgICAgICAgICA8cHJvZHVjdENvZGVzPgogICAgICAgICAgICAgICAgICA8cHJvZHVjdENvZGU+CiAgICAgICAgICAgICAgICAgICAgIDxwcm9kdWN0Q29kZUNhdGVnb3J5PkFISzwvcHJvZHVjdENvZGVDYXRlZ29yeT4KICAgICAgICAgICAgICAgICAgICAgPHByb2R1Y3RDb2RlT3duVmFsdWU+Wm9jbEZwSENHcm1oclVOZnNKd0JHYUJzUEdMTE5Dc3VsS2tmc2NFcmNmcnNqZE1ZZEdGbG5SbWxodEJYb21lV0RrQ0ZWanBPTmhYcVlETGR3a3dwYnptUG5PbU91cGRnS256SEZYb09vTW1YSmVZbEZrUVprWm5GcGx0VVNkanVGU2tET2lEUkF6VWZVeWdybGhHZGJ1dWZQT0JNYkNhSHBRb2ZldEpiZVR2VXNpa29FVVp1WElVdkl5V2FkVXdCQXNjdUhxcXdMR2pYZ2huSFJJeE54d0pad3hzcnV4S1RsWGVQbkFnR1VUVHdqeXdpTmhzRENDUWxtYUl0TWVqPC9wcm9kdWN0Q29kZU93blZhbHVlPgogICAgICAgICAgICAgICAgICA8L3Byb2R1Y3RDb2RlPgogICAgICAgICAgICAgICA8L3Byb2R1Y3RDb2Rlcz4KICAgICAgICAgICAgICAgPGxpbmVFeHByZXNzaW9uSW5kaWNhdG9yPmZhbHNlPC9saW5lRXhwcmVzc2lvbkluZGljYXRvcj4KICAgICAgICAgICAgICAgPGxpbmVOYXR1cmVJbmRpY2F0b3I+UFJPRFVDVDwvbGluZU5hdHVyZUluZGljYXRvcj4KICAgICAgICAgICAgICAgPGxpbmVEZXNjcmlwdGlvbj40VjRqNlpCT0Q1bTB3bGpxVXl1Um0yNkw1OVhYdEdzYkd5NFZxcDdiZU42dEpNN1dCQ1pBc0pudEtjVExoQ0dXcDhLTk5ydzdpUTJ4QXlsbVZOdGpTaGs5NkFrZzdDQkdsQ2lRU05aZ3NoRDUyOXExeEtQakp5WUFrQXNMb3RoZGgzVWVEVWR3cURsMHlFODVDeUswbXFlSkk5UHJ2MFZIckozcHp6OVY0NnZqWkt4eXNRRWFCNm5sRXFOSmFiZ3BBTW90RWRielRUeXdLVjIyaHI0OGxzd0lsNnRCSnFpZnBHN1FaQlVGMVZpSU1Tc2NZV0lKM1pMYTlTeXR3TXRiOXg2TGs3U1ZxaWhhNVFhbjZkbjZReGE0Rk03WXE3NDUyVmpwek5vVTdXSGJ6ckpKZXltZFh2aENsaFlmaktnSzVSZzg1NXFvN1BUWFNPZ1JFa3pwTldsVUtsbENvelhYRDVZYUtWakVyaGNDaGJCbjZBb0Z5WE5GVnM5S3VqWEg3YThaVTFEWnlBOVFodWxZREI4b2w0cktlQkJJTkJGNXRYYmZpdnJmUDY2elBKUXd6SEhQUHUyVHlHSzR5UEdtWjJyQW9qU0RLRGJBSUgzd1JFNkV2a010MW9HTlRRa2Rkd0tWU21rYkMwMWhGazc2Ulg2a2dFWU9xZ3gzV29HNDwvbGluZURlc2NyaXB0aW9uPgogICAgICAgICAgICAgICA8cXVhbnRpdHk+ODwvcXVhbnRpdHk+CiAgICAgICAgICAgICAgIDx1bml0T2ZNZWFzdXJlPk9XTjwvdW5pdE9mTWVhc3VyZT4KICAgICAgICAgICAgICAgPHVuaXRPZk1lYXN1cmVPd24+dGU2OTg3RFVqUWR4VGt5ejY3d3BzTlUycnpqY0NIQkV2ZjI0UVVGaDVTQ1dJQWdvU2I8L3VuaXRPZk1lYXN1cmVPd24+CiAgICAgICAgICAgICAgIDx1bml0UHJpY2U+MjAwPC91bml0UHJpY2U+CiAgICAgICAgICAgICAgIDx1bml0UHJpY2VIVUY+MjAwPC91bml0UHJpY2VIVUY+CiAgICAgICAgICAgICAgIDxsaW5lRGlzY291bnREYXRhPgogICAgICAgICAgICAgICAgICA8ZGlzY291bnREZXNjcmlwdGlvbj50ZXN6dDwvZGlzY291bnREZXNjcmlwdGlvbj4KICAgICAgICAgICAgICAgICAgPGRpc2NvdW50VmFsdWU+MTwvZGlzY291bnRWYWx1ZT4KICAgICAgICAgICAgICAgICAgPGRpc2NvdW50UmF0ZT4xPC9kaXNjb3VudFJhdGU+CiAgICAgICAgICAgICAgIDwvbGluZURpc2NvdW50RGF0YT4KICAgICAgICAgICAgICAgPGxpbmVBbW91bnRzTm9ybWFsPgogICAgICAgICAgICAgICAgICA8bGluZU5ldEFtb3VudERhdGE+CiAgICAgICAgICAgICAgICAgICAgIDxsaW5lTmV0QW1vdW50PjE2MDA8L2xpbmVOZXRBbW91bnQ+CiAgICAgICAgICAgICAgICAgICAgIDxsaW5lTmV0QW1vdW50SFVGPjE2MDA8L2xpbmVOZXRBbW91bnRIVUY+CiAgICAgICAgICAgICAgICAgIDwvbGluZU5ldEFtb3VudERhdGE+CiAgICAgICAgICAgICAgICAgIDxsaW5lVmF0UmF0ZT4KICAgICAgICAgICAgICAgICAgICAgPHZhdFBlcmNlbnRhZ2U+MC4yNTwvdmF0UGVyY2VudGFnZT4KICAgICAgICAgICAgICAgICAgPC9saW5lVmF0UmF0ZT4KICAgICAgICAgICAgICAgICAgPGxpbmVWYXREYXRhPgogICAgICAgICAgICAgICAgICAgICA8bGluZVZhdEFtb3VudD40MDA8L2xpbmVWYXRBbW91bnQ+CiAgICAgICAgICAgICAgICAgICAgIDxsaW5lVmF0QW1vdW50SFVGPjQwMDwvbGluZVZhdEFtb3VudEhVRj4KICAgICAgICAgICAgICAgICAgPC9saW5lVmF0RGF0YT4KICAgICAgICAgICAgICAgICAgPGxpbmVHcm9zc0Ftb3VudERhdGE+CiAgICAgICAgICAgICAgICAgICAgIDxsaW5lR3Jvc3NBbW91bnROb3JtYWw+MjAwMDwvbGluZUdyb3NzQW1vdW50Tm9ybWFsPgogICAgICAgICAgICAgICAgICAgICA8bGluZUdyb3NzQW1vdW50Tm9ybWFsSFVGPjIwMDA8L2xpbmVHcm9zc0Ftb3VudE5vcm1hbEhVRj4KICAgICAgICAgICAgICAgICAgPC9saW5lR3Jvc3NBbW91bnREYXRhPgogICAgICAgICAgICAgICA8L2xpbmVBbW91bnRzTm9ybWFsPgogICAgICAgICAgICAgICA8aW50ZXJtZWRpYXRlZFNlcnZpY2U+dHJ1ZTwvaW50ZXJtZWRpYXRlZFNlcnZpY2U+CiAgICAgICAgICAgICAgIDxuZXdUcmFuc3BvcnRNZWFuPgogICAgICAgICAgICAgICAgICA8Zmlyc3RFbnRyeUludG9TZXJ2aWNlPjIwMjAtMDktMDQ8L2ZpcnN0RW50cnlJbnRvU2VydmljZT4KICAgICAgICAgICAgICAgICAgPHZlaGljbGU+CiAgICAgICAgICAgICAgICAgICAgIDxlbmdpbmVDYXBhY2l0eT4xMjM0NTY3ODkwMTIuMTIzNDU2Nzg5MTwvZW5naW5lQ2FwYWNpdHk+CiAgICAgICAgICAgICAgICAgICAgIDxlbmdpbmVQb3dlcj4xMjM0NTY3ODkwMTIuMTIzNDU2Nzg5MTwvZW5naW5lUG93ZXI+CiAgICAgICAgICAgICAgICAgICAgIDxrbXM+MTIzNDU2Nzg5MDEyLjEyMzQ1Njc4OTE8L2ttcz4KICAgICAgICAgICAgICAgICAgPC92ZWhpY2xlPgogICAgICAgICAgICAgICA8L25ld1RyYW5zcG9ydE1lYW4+CiAgICAgICAgICAgICAgIDxkZXBvc2l0SW5kaWNhdG9yPnRydWU8L2RlcG9zaXRJbmRpY2F0b3I+CiAgICAgICAgICAgICAgIDxvYmxpZ2F0ZWRGb3JQcm9kdWN0RmVlPnRydWU8L29ibGlnYXRlZEZvclByb2R1Y3RGZWU+CiAgICAgICAgICAgICAgIDxHUENFeGNpc2U+MTAwPC9HUENFeGNpc2U+CiAgICAgICAgICAgICAgIDxkaWVzZWxPaWxQdXJjaGFzZT4KICAgICAgICAgICAgICAgICAgPHB1cmNoYXNlTG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6Y291bnRyeUNvZGU+QVo8L25zMjpjb3VudHJ5Q29kZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpyZWdpb24+eVRaUWt2S3hWQWpCaERaUEJQeVVpUFhRek14blZaa25hR1dYS2V6UUpieFhHdVJZT0c8L25zMjpyZWdpb24+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6cG9zdGFsQ29kZT5BQUEwPC9uczI6cG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpjaXR5PmprVmdrS3d6bWNHSUJUeHZuYkp4c1lPWlJlWFVrblhUT0VnWGJ2Ynpud0FaTlpVSnNlSnNFdVJHdEJUVWFOT3NjVWZ6ZXhsR3haYVd1aXBBeXJzaHNTeGRWYXBFaXloaE1hcXNmZElBQ3hOVFFZVmdnZmxpZUFYTFJncmZvU1daVHBDa2hyZEpURm1Wb0N3dEpMeHJocGJQcFB4eXZHbndzUUNSTlBFVlladlZEWmhGZVh5c0ZRZnB0YkNDS2dUVnZkV3pxUEZPc3FmZllBTHBrR2JPb3VKbWVnRmdwTk5LWkthd1BGS01ZVklwU1FPRkFFUXV2SVBPTmtDWm5mZjwvbnMyOmNpdHk+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6YWRkaXRpb25hbEFkZHJlc3NEZXRhaWw+c1RTQnRxR3V5TlFIWkVKWnpzaU9wdUNVamhZeFNjdXd4UE5EdkdMRVh6Q3BQY0ttd2FHaGdmQlVzU1ZUeFhHUkNJUkRaeGx1RE5LQXlYZUVjZXh5cm1RanNYa0JaZHBSUHR5RnB4YVhoRGlmQldrRmZoSHJyQWVQY3VMVEJQS3RSaUlaT2NNQW9FVmJVY3dvZ0xTZnRGcXlmSXpMV2xvdkt3aGZOTW9wYWpLTmlCQlVvSWJWZkZCZVpNeGF6QnhsbldIZ0tlR1VQR1FWSHpISkhIeE5HZG10a0N2SkNWcWRxV3RYTElPdXFnbll5S2JJeHRoSGdpcVZFbkxtb3N5PC9uczI6YWRkaXRpb25hbEFkZHJlc3NEZXRhaWw+CiAgICAgICAgICAgICAgICAgIDwvcHVyY2hhc2VMb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPHB1cmNoYXNlRGF0ZT4yMDIwLTA5LTA0PC9wdXJjaGFzZURhdGU+CiAgICAgICAgICAgICAgICAgIDx2ZWhpY2xlUmVnaXN0cmF0aW9uTnVtYmVyPkFaPC92ZWhpY2xlUmVnaXN0cmF0aW9uTnVtYmVyPgogICAgICAgICAgICAgICAgICA8ZGllc2VsT2lsUXVhbnRpdHk+MTIzNDU2Nzg5MDEyLjEyMzQ1Njc4OTE8L2RpZXNlbE9pbFF1YW50aXR5PgogICAgICAgICAgICAgICA8L2RpZXNlbE9pbFB1cmNoYXNlPgogICAgICAgICAgICAgICA8bmV0YURlY2xhcmF0aW9uPmZhbHNlPC9uZXRhRGVjbGFyYXRpb24+CiAgICAgICAgICAgICAgIDxwcm9kdWN0RmVlQ2xhdXNlPgogICAgICAgICAgICAgICAgICA8Y3VzdG9tZXJEZWNsYXJhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgPHByb2R1Y3RTdHJlYW0+UExBU1RJQzwvcHJvZHVjdFN0cmVhbT4KICAgICAgICAgICAgICAgICAgICAgPHByb2R1Y3RGZWVXZWlnaHQ+MTwvcHJvZHVjdEZlZVdlaWdodD4KICAgICAgICAgICAgICAgICAgPC9jdXN0b21lckRlY2xhcmF0aW9uPgogICAgICAgICAgICAgICA8L3Byb2R1Y3RGZWVDbGF1c2U+CiAgICAgICAgICAgICAgIDxsaW5lUHJvZHVjdEZlZUNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgIDxwcm9kdWN0RmVlQ29kZT4KICAgICAgICAgICAgICAgICAgICAgPHByb2R1Y3RDb2RlQ2F0ZWdvcnk+Q1NLPC9wcm9kdWN0Q29kZUNhdGVnb3J5PgogICAgICAgICAgICAgICAgICAgICA8cHJvZHVjdENvZGVWYWx1ZT5BWjA5PC9wcm9kdWN0Q29kZVZhbHVlPgogICAgICAgICAgICAgICAgICA8L3Byb2R1Y3RGZWVDb2RlPgogICAgICAgICAgICAgICAgICA8cHJvZHVjdEZlZVF1YW50aXR5PjE8L3Byb2R1Y3RGZWVRdWFudGl0eT4KICAgICAgICAgICAgICAgICAgPHByb2R1Y3RGZWVNZWFzdXJpbmdVbml0PkRBUkFCPC9wcm9kdWN0RmVlTWVhc3VyaW5nVW5pdD4KICAgICAgICAgICAgICAgICAgPHByb2R1Y3RGZWVSYXRlPjQwMDwvcHJvZHVjdEZlZVJhdGU+CiAgICAgICAgICAgICAgICAgIDxwcm9kdWN0RmVlQW1vdW50PjQwMDwvcHJvZHVjdEZlZUFtb3VudD4KICAgICAgICAgICAgICAgPC9saW5lUHJvZHVjdEZlZUNvbnRlbnQ+CiAgICAgICAgICAgICAgIDxhZGRpdGlvbmFsTGluZURhdGE+CiAgICAgICAgICAgICAgICAgIDxkYXRhTmFtZT5BMTIzNDVfQVNEQVNEQVNEPC9kYXRhTmFtZT4KICAgICAgICAgICAgICAgICAgPGRhdGFEZXNjcmlwdGlvbj55ZUZ6ZlhHMzhib1NBdmZUUTlQcDJGbmg0Z1J2WWptU3JoUk5PUGE3dG9rN3NENzN5RHJYSXlteWs0MU1ucXk2TnQ0dTNIUlk3V1NkbnNDdmRxSGl3NGZVUG1lbjN5WWt5M0pRcENFb0NaZ2NIc3lOd1U4a1h4T3kzdXhKQ1VHOTBkVXhUdnVJcEhnellEU1Zjek5OUE5BZ1VUcHNQbEZWOGhkdnl5UTFIVVd5RVkyaWpzRzV6amtIOWlnVWZCS0xuN3d0RVVMejBzSVRxMThSbkF0UW5LdFVwNkZpMGMwalB1MldlM0kycE1oTnJjVFdWRGRSdnp6NUJtR0dYM1k8L2RhdGFEZXNjcmlwdGlvbj4KICAgICAgICAgICAgICAgICAgPGRhdGFWYWx1ZT40M2lQcXo0MExOdnB5YlhYRHY4dmxjbkVTbVlPdWppQjlHSnNWTTZhTU9mQkp3N0I0UjQ5b3BwN01EWDZka1hNRDRxV2trSDNGRUFKRjB4N3Jibzg0eTQ1UU9mSjZ6eWNVd0lkZ2JvREo3SFpFaTRqVkdhekZjSUJKMEplZU9LOTMxa3BpRUMwbExrS2FyM1B4Qmc1bFBjRW1sM3ZUNXJ4UW10Y3ZtWjNxTGV2bWVObnF0b3N6V0NIR013MTN0SDVnYTNPcTR1SDdDU2ZGV1dtQjRldE1LTEhJNlZCOHF1bmRpbjhhQ3Fsald4Y3hDNDFNNlY0UWxydXVtSk9GczdQWmdzUXVNSU5ZSkZmaVpKRzFZbFdSWWRIOFNHZnpIWkhBdWl2R1B4YmtqN2ZvbG1IbzcybFZyTXhPczZzdnJJa1BXOGpUWm9PV2JQTFc4MTNmVjR6ZGNseUZNYmRtVFBudXU4SGNIazh1WGdmTEEzdlpidGxZTTJPWUE4UFB6MmlFYk9JSlI2N3hYa0JPUFM2U2NyQWV5b3ZVYUd1TnZ3WTBsMVN2ZlVFWUNkRnZDQk5PdXo2NkhQWEFHOWJLSjJJbGpNUkZPaHlzeWVGRHByQmQ4dFp0Mk9VNzdRSFdadkJ5bEJQWkJUVlBOejQwbE1NQVo5MHJEZ0cyYUlaS1U4bzwvZGF0YVZhbHVlPgogICAgICAgICAgICAgICA8L2FkZGl0aW9uYWxMaW5lRGF0YT4KICAgICAgICAgICAgPC9saW5lPgogICAgICAgICA8L2ludm9pY2VMaW5lcz4KICAgICAgICAgPHByb2R1Y3RGZWVTdW1tYXJ5PgogICAgICAgICAgICA8cHJvZHVjdEZlZU9wZXJhdGlvbj5ERVBPU0lUPC9wcm9kdWN0RmVlT3BlcmF0aW9uPgogICAgICAgICAgICA8cHJvZHVjdEZlZURhdGE+CiAgICAgICAgICAgICAgIDxwcm9kdWN0RmVlQ29kZT4KICAgICAgICAgICAgICAgICAgPHByb2R1Y3RDb2RlQ2F0ZWdvcnk+Q1NLPC9wcm9kdWN0Q29kZUNhdGVnb3J5PgogICAgICAgICAgICAgICAgICA8cHJvZHVjdENvZGVWYWx1ZT5BWjA5PC9wcm9kdWN0Q29kZVZhbHVlPgogICAgICAgICAgICAgICA8L3Byb2R1Y3RGZWVDb2RlPgogICAgICAgICAgICAgICA8cHJvZHVjdEZlZVF1YW50aXR5PjE8L3Byb2R1Y3RGZWVRdWFudGl0eT4KICAgICAgICAgICAgICAgPHByb2R1Y3RGZWVNZWFzdXJpbmdVbml0PkRBUkFCPC9wcm9kdWN0RmVlTWVhc3VyaW5nVW5pdD4KICAgICAgICAgICAgICAgPHByb2R1Y3RGZWVSYXRlPjQwMDwvcHJvZHVjdEZlZVJhdGU+CiAgICAgICAgICAgICAgIDxwcm9kdWN0RmVlQW1vdW50PjQwMDwvcHJvZHVjdEZlZUFtb3VudD4KICAgICAgICAgICAgPC9wcm9kdWN0RmVlRGF0YT4KICAgICAgICAgICAgPHByb2R1Y3RDaGFyZ2VTdW0+NDAwPC9wcm9kdWN0Q2hhcmdlU3VtPgogICAgICAgICAgICA8cGF5bWVudEV2aWRlbmNlRG9jdW1lbnREYXRhPgogICAgICAgICAgICAgICA8ZXZpZGVuY2VEb2N1bWVudE5vPmdpeldlS092YW9LREZBZmFtSW5rOVdVOVkzR0lZSk82cXlaTXBFUWlpU2VjbkpydkE0PC9ldmlkZW5jZURvY3VtZW50Tm8+CiAgICAgICAgICAgICAgIDxldmlkZW5jZURvY3VtZW50RGF0ZT4yMDIwLTA5LTA0PC9ldmlkZW5jZURvY3VtZW50RGF0ZT4KICAgICAgICAgICAgICAgPG9ibGlnYXRlZE5hbWU+cFNpVWFoTmwyMGJ2eURxZnVmb3ZiZEdQbTl6ZEhJSG11dkV5QTBORXk4TkxjMTJCZzN6S2Rva2N0QTZjN25UVGtHc1psYlRHeFRlVUdwWVh3SFVrdGFCbmdvMmxXMkZ5SFRRSUl4djR2bnVlMmgzREhoWHl6NjVHaW1tYVBjS1A0QWlsaHc3Tm5Od3dSZk5rOGVUUEVPekdjZTE5czUwYWhCaWVDUkcwYnZOQUNsNllyYUs4NnBGOFl4RUg1ekhUcW84SHlYVWwyTVk3dEVMcDJidEo3SzBWVUZYOXRLeVE1S0NzNFdhS3JaZ0M0ZE5JQ3duR09naWFLVmlYOXVQPC9vYmxpZ2F0ZWROYW1lPgogICAgICAgICAgICAgICA8b2JsaWdhdGVkQWRkcmVzcz4KICAgICAgICAgICAgICAgICAgPG5zMjpzaW1wbGVBZGRyZXNzPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmNvdW50cnlDb2RlPkFaPC9uczI6Y291bnRyeUNvZGU+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6cmVnaW9uPlVUeXpvbGptc0tuUXlva3NKZGJsTXJVcUp3b0FTVklUY1l0RGZIS0p3RHF2RW1lTGVNPC9uczI6cmVnaW9uPgogICAgICAgICAgICAgICAgICAgICA8bnMyOnBvc3RhbENvZGU+QUFBMDwvbnMyOnBvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6Y2l0eT5MZGRLWEh1UXZUQ2pZY0dkdUZmZ3ZvT2xWUkFhWmdMWHFoVXBFcXJIUWRkTGxvaHBBZkdpZEJEcWJidXBIclZCY2ZwSWJBZ3F6Y1J4SWJuclhqZHpYUEl6WXJOQ2x5Z1B0RUNhSWp5Y0hoSXJrd3VUbW50Y1pmZVpmbGplRnl3Z1FCV2RkYVdhTU1Hc05YQWR4SUNabHN1RHR6eXBmSEFnWGdXYlZLbGpRc0pTSmhhYnhCaEd1TkF3RVVXTVdJWW5pT3pKd2hzZFlaVWhBTW5hak1FTFZDTG9JSXNzTENZWUNQbWZaclhxbktNTGdyaGZ1eWxBelVYSWJiSmZuR3c8L25zMjpjaXR5PgogICAgICAgICAgICAgICAgICAgICA8bnMyOmFkZGl0aW9uYWxBZGRyZXNzRGV0YWlsPnR4Q1FzdkdNaEV0cXZOeVJ4U1p2dnh5cEFIVWFHWWN5cW13VUFPaUtQZXVUVk1LZWxzeXFuQXJGeHRkT1BOTlZ1VW9MU015RVVFZ01mbU1haVNibW13eHFQRFBRRkRkdHF4ZWN6Y0pNZGZZdVhoUnBZa0xqREdZRXB5RXVNSUZOSkZJWkJJbEh5SkdmdHlPSGpVZFhDdVFrSHBlb1dhTllpSnNTWkVkc0VBZ1FYTXhqdFlwa0JZWWZGUFZsS09kQ1p6TWVEZ3VQeU1GUkJpTFd0eGpmZUNrTEp6dVBqa3dJaEllR0FPWnZYUXpteE5EcGJqUkp3aUlyWkZZckd5dDwvbnMyOmFkZGl0aW9uYWxBZGRyZXNzRGV0YWlsPgogICAgICAgICAgICAgICAgICA8L25zMjpzaW1wbGVBZGRyZXNzPgogICAgICAgICAgICAgICA8L29ibGlnYXRlZEFkZHJlc3M+CiAgICAgICAgICAgICAgIDxvYmxpZ2F0ZWRUYXhOdW1iZXI+CiAgICAgICAgICAgICAgICAgIDxuczI6dGF4cGF5ZXJJZD4xMTExMTExMTwvbnMyOnRheHBheWVySWQ+CiAgICAgICAgICAgICAgICAgIDxuczI6dmF0Q29kZT4zPC9uczI6dmF0Q29kZT4KICAgICAgICAgICAgICAgICAgPG5zMjpjb3VudHlDb2RlPjUxPC9uczI6Y291bnR5Q29kZT4KICAgICAgICAgICAgICAgPC9vYmxpZ2F0ZWRUYXhOdW1iZXI+CiAgICAgICAgICAgIDwvcGF5bWVudEV2aWRlbmNlRG9jdW1lbnREYXRhPgogICAgICAgICA8L3Byb2R1Y3RGZWVTdW1tYXJ5PgogICAgICAgICA8cHJvZHVjdEZlZVN1bW1hcnk+CiAgICAgICAgICAgIDxwcm9kdWN0RmVlT3BlcmF0aW9uPkRFUE9TSVQ8L3Byb2R1Y3RGZWVPcGVyYXRpb24+CiAgICAgICAgICAgIDxwcm9kdWN0RmVlRGF0YT4KICAgICAgICAgICAgICAgPHByb2R1Y3RGZWVDb2RlPgogICAgICAgICAgICAgICAgICA8cHJvZHVjdENvZGVDYXRlZ29yeT5DU0s8L3Byb2R1Y3RDb2RlQ2F0ZWdvcnk+CiAgICAgICAgICAgICAgICAgIDxwcm9kdWN0Q29kZVZhbHVlPkFaMDk8L3Byb2R1Y3RDb2RlVmFsdWU+CiAgICAgICAgICAgICAgIDwvcHJvZHVjdEZlZUNvZGU+CiAgICAgICAgICAgICAgIDxwcm9kdWN0RmVlUXVhbnRpdHk+MTwvcHJvZHVjdEZlZVF1YW50aXR5PgogICAgICAgICAgICAgICA8cHJvZHVjdEZlZU1lYXN1cmluZ1VuaXQ+REFSQUI8L3Byb2R1Y3RGZWVNZWFzdXJpbmdVbml0PgogICAgICAgICAgICAgICA8cHJvZHVjdEZlZVJhdGU+NDAwPC9wcm9kdWN0RmVlUmF0ZT4KICAgICAgICAgICAgICAgPHByb2R1Y3RGZWVBbW91bnQ+NDAwPC9wcm9kdWN0RmVlQW1vdW50PgogICAgICAgICAgICA8L3Byb2R1Y3RGZWVEYXRhPgogICAgICAgICAgICA8cHJvZHVjdENoYXJnZVN1bT40MDA8L3Byb2R1Y3RDaGFyZ2VTdW0+CiAgICAgICAgICAgIDxwYXltZW50RXZpZGVuY2VEb2N1bWVudERhdGE+CiAgICAgICAgICAgICAgIDxldmlkZW5jZURvY3VtZW50Tm8+ajJLYk9pUFdBd3pmYmtwZmdJM0trSGpiZlQ1OFd6MXRvQUdQNFNaZE1NbmVqWjBYYUM8L2V2aWRlbmNlRG9jdW1lbnRObz4KICAgICAgICAgICAgICAgPGV2aWRlbmNlRG9jdW1lbnREYXRlPjIwMjAtMDktMDQ8L2V2aWRlbmNlRG9jdW1lbnREYXRlPgogICAgICAgICAgICAgICA8b2JsaWdhdGVkTmFtZT4yTWIzNGVGNXdYcEd5cEtZOUVkMXZlbkU2Y3p1VUhxaXR6WUNSeUZiNXBpVjc0TEhZQUNvRXhScmlKRGRsc1pXZk9KbldNWHQwQTVudTM0ZURBYWNTUXIwaWtwcFhoSXg0V0YyQWZJQWZnY2hkdlpJdUxOMGRyV3o2TnhZT1hVYkI4d2EweGJBN2l1TE16eUtpSXUwQ3VDS0plMmFPSnNjR2NET0NlSkFWTGdiUXNMQkM5TTNzR21aMGJoZWtrSkxmQWZQSTdDSGIybnpaeVg2SmIzR1o1bkMzUGNzNkYydjBNRlJZVXM5b012MnFQNDJUMDYxRlV3RTdpOWNvWmM8L29ibGlnYXRlZE5hbWU+CiAgICAgICAgICAgICAgIDxvYmxpZ2F0ZWRBZGRyZXNzPgogICAgICAgICAgICAgICAgICA8bnMyOnNpbXBsZUFkZHJlc3M+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6Y291bnRyeUNvZGU+QVo8L25zMjpjb3VudHJ5Q29kZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpyZWdpb24+ZlhJQVhtR1hrUXZ1R2ZPUVZ5U0RVWGdmVVhGRWJzZ3BiQ2NGWVNHdlhoeGpTSHRIelg8L25zMjpyZWdpb24+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6cG9zdGFsQ29kZT5BQUEwPC9uczI6cG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpjaXR5PlJKRVBLZnBNbHB4UEZhbU5lanFmRnVZcnhLVllTa3lVTHFqVFZidGZySWZmdkJneHZhUUFDbU56UkFudXJKQWRUaXdnRXFlYnd5WGhCWnFiT1ZIRmRDZFFYR1liY0tKVG9TSWhsY0JBbkhlTGZOVnl5c3pQTGVCekNhS1FaRmpmSnJkZXVnTmlDZVpTeVJETWluWm9zVUJrRUtCSEZWUHRqY2dCWGViSnF6QmN0bFNtUVpuTlRycGtFaGd4QkZzWVpXTXFzZmxuYnN1d1pibml0SXFqVWtOampjbWFCS09rcnR4dHZmV2xoZ3pDdEFPSHNleHp3R3FOUVNnR250SDwvbnMyOmNpdHk+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6YWRkaXRpb25hbEFkZHJlc3NEZXRhaWw+SUt5ZVp1emduQ2pBTW91allVTGtwYXdDem11c1FIRWl0UWlnUG1yanBTT2VldHJBRmRCR3l5UkFadXhZVldoZXpVa3Z0TlZFeWV0cVNIandXYXdGZkVaRnlzTE5Wd212dHprVktKVkpMRXdWZFZlaFp5V0p1cnlRSW9jQ0pMVFJBa2JodmdGU01TenJZY2RDdGpuaG56Z2NpQWNqTVBqTUlMYU1FSVhqVnZoV0VLa0FRT2FKSUJ3aWJhWGFMQmlXU3VsV2V2VUVYZlp4Z1VjQmxKREREU2txaE5XY0NTc0dGUHJSY1dpZEdzTW9zbWJZTkRaelBpTWx5dmNzek5MPC9uczI6YWRkaXRpb25hbEFkZHJlc3NEZXRhaWw+CiAgICAgICAgICAgICAgICAgIDwvbnMyOnNpbXBsZUFkZHJlc3M+CiAgICAgICAgICAgICAgIDwvb2JsaWdhdGVkQWRkcmVzcz4KICAgICAgICAgICAgICAgPG9ibGlnYXRlZFRheE51bWJlcj4KICAgICAgICAgICAgICAgICAgPG5zMjp0YXhwYXllcklkPjExMTExMTExPC9uczI6dGF4cGF5ZXJJZD4KICAgICAgICAgICAgICAgICAgPG5zMjp2YXRDb2RlPjM8L25zMjp2YXRDb2RlPgogICAgICAgICAgICAgICAgICA8bnMyOmNvdW50eUNvZGU+NTE8L25zMjpjb3VudHlDb2RlPgogICAgICAgICAgICAgICA8L29ibGlnYXRlZFRheE51bWJlcj4KICAgICAgICAgICAgPC9wYXltZW50RXZpZGVuY2VEb2N1bWVudERhdGE+CiAgICAgICAgIDwvcHJvZHVjdEZlZVN1bW1hcnk+CiAgICAgICAgIDxpbnZvaWNlU3VtbWFyeT4KICAgICAgICAgICAgPHN1bW1hcnlOb3JtYWw+CiAgICAgICAgICAgICAgIDxzdW1tYXJ5QnlWYXRSYXRlPgogICAgICAgICAgICAgICAgICA8dmF0UmF0ZT4KICAgICAgICAgICAgICAgICAgICAgPHZhdFBlcmNlbnRhZ2U+MC4yNTwvdmF0UGVyY2VudGFnZT4KICAgICAgICAgICAgICAgICAgPC92YXRSYXRlPgogICAgICAgICAgICAgICAgICA8dmF0UmF0ZU5ldERhdGE+CiAgICAgICAgICAgICAgICAgICAgIDx2YXRSYXRlTmV0QW1vdW50PjE2MDA8L3ZhdFJhdGVOZXRBbW91bnQ+CiAgICAgICAgICAgICAgICAgICAgIDx2YXRSYXRlTmV0QW1vdW50SFVGPjE2MDA8L3ZhdFJhdGVOZXRBbW91bnRIVUY+CiAgICAgICAgICAgICAgICAgIDwvdmF0UmF0ZU5ldERhdGE+CiAgICAgICAgICAgICAgICAgIDx2YXRSYXRlVmF0RGF0YT4KICAgICAgICAgICAgICAgICAgICAgPHZhdFJhdGVWYXRBbW91bnQ+NDAwPC92YXRSYXRlVmF0QW1vdW50PgogICAgICAgICAgICAgICAgICAgICA8dmF0UmF0ZVZhdEFtb3VudEhVRj40MDA8L3ZhdFJhdGVWYXRBbW91bnRIVUY+CiAgICAgICAgICAgICAgICAgIDwvdmF0UmF0ZVZhdERhdGE+CiAgICAgICAgICAgICAgICAgIDx2YXRSYXRlR3Jvc3NEYXRhPgogICAgICAgICAgICAgICAgICAgICA8dmF0UmF0ZUdyb3NzQW1vdW50PjIwMDA8L3ZhdFJhdGVHcm9zc0Ftb3VudD4KICAgICAgICAgICAgICAgICAgICAgPHZhdFJhdGVHcm9zc0Ftb3VudEhVRj4yMDAwPC92YXRSYXRlR3Jvc3NBbW91bnRIVUY+CiAgICAgICAgICAgICAgICAgIDwvdmF0UmF0ZUdyb3NzRGF0YT4KICAgICAgICAgICAgICAgPC9zdW1tYXJ5QnlWYXRSYXRlPgogICAgICAgICAgICAgICA8aW52b2ljZU5ldEFtb3VudD4xNjAwPC9pbnZvaWNlTmV0QW1vdW50PgogICAgICAgICAgICAgICA8aW52b2ljZU5ldEFtb3VudEhVRj4xNjAwPC9pbnZvaWNlTmV0QW1vdW50SFVGPgogICAgICAgICAgICAgICA8aW52b2ljZVZhdEFtb3VudD40MDA8L2ludm9pY2VWYXRBbW91bnQ+CiAgICAgICAgICAgICAgIDxpbnZvaWNlVmF0QW1vdW50SFVGPjQwMDwvaW52b2ljZVZhdEFtb3VudEhVRj4KICAgICAgICAgICAgPC9zdW1tYXJ5Tm9ybWFsPgogICAgICAgICAgICA8c3VtbWFyeUdyb3NzRGF0YT4KICAgICAgICAgICAgICAgPGludm9pY2VHcm9zc0Ftb3VudD4yMDAwPC9pbnZvaWNlR3Jvc3NBbW91bnQ+CiAgICAgICAgICAgICAgIDxpbnZvaWNlR3Jvc3NBbW91bnRIVUY+MjAwMDwvaW52b2ljZUdyb3NzQW1vdW50SFVGPgogICAgICAgICAgICA8L3N1bW1hcnlHcm9zc0RhdGE+CiAgICAgICAgIDwvaW52b2ljZVN1bW1hcnk+CiAgICAgIDwvaW52b2ljZT4KICAgPC9pbnZvaWNlTWFpbj4KPC9JbnZvaWNlRGF0YT4=</invoiceData>
			<electronicInvoiceHash cryptoType="SHA3-512">06327A94D9482F1162179A1A2CEEE80DE4E7BCE94F848DC53257921452F9AB781A38FE55835BB38479253451D674E768622BA5485EF659383907990EBDA3012D</electronicInvoiceHash>
		</invoiceOperation>
		<invoiceOperation>
			<index>2</index>
			<invoiceOperation>CREATE</invoiceOperation>
			<invoiceData>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPEludm9pY2VEYXRhIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5uYXYuZ292Lmh1L09TQS8zLjAvZGF0YSIgeG1sbnM6bnMyPSJodHRwOi8vc2NoZW1hcy5uYXYuZ292Lmh1L09TQS8zLjAvYmFzZSI+CiAgIDxpbnZvaWNlTnVtYmVyPjgxOTMzMTY5OTE1ODY3NTg0MjU2PC9pbnZvaWNlTnVtYmVyPgogICA8aW52b2ljZUlzc3VlRGF0ZT4yMDIwLTA5LTA0PC9pbnZvaWNlSXNzdWVEYXRlPgogICA8Y29tcGxldGVuZXNzSW5kaWNhdG9yPnRydWU8L2NvbXBsZXRlbmVzc0luZGljYXRvcj4KICAgPGludm9pY2VNYWluPgogICAgICA8aW52b2ljZT4KICAgICAgICAgPGludm9pY2VIZWFkPgogICAgICAgICAgICA8c3VwcGxpZXJJbmZvPgogICAgICAgICAgICAgICA8c3VwcGxpZXJUYXhOdW1iZXI+CiAgICAgICAgICAgICAgICAgIDxuczI6dGF4cGF5ZXJJZD40ODI1ODAzNjwvbnMyOnRheHBheWVySWQ+CiAgICAgICAgICAgICAgICAgIDxuczI6dmF0Q29kZT41PC9uczI6dmF0Q29kZT4KICAgICAgICAgICAgICAgICAgPG5zMjpjb3VudHlDb2RlPjUxPC9uczI6Y291bnR5Q29kZT4KICAgICAgICAgICAgICAgPC9zdXBwbGllclRheE51bWJlcj4KICAgICAgICAgICAgICAgPGdyb3VwTWVtYmVyVGF4TnVtYmVyPgogICAgICAgICAgICAgICAgICA8bnMyOnRheHBheWVySWQ+NDQ0NDQ0NDQ8L25zMjp0YXhwYXllcklkPgogICAgICAgICAgICAgICAgICA8bnMyOnZhdENvZGU+NDwvbnMyOnZhdENvZGU+CiAgICAgICAgICAgICAgICAgIDxuczI6Y291bnR5Q29kZT41MTwvbnMyOmNvdW50eUNvZGU+CiAgICAgICAgICAgICAgIDwvZ3JvdXBNZW1iZXJUYXhOdW1iZXI+CiAgICAgICAgICAgICAgIDxjb21tdW5pdHlWYXROdW1iZXI+QVMxNjUxNDE5MzwvY29tbXVuaXR5VmF0TnVtYmVyPgogICAgICAgICAgICAgICA8c3VwcGxpZXJOYW1lPlBZaGhFV1RMQlZrS3JYUUZHS1lJVnpiQklzY2RJcWdHdllRSXFqYVFvTW1DRkVVdGZ6cXRKWVZDZUhEUE1qc29SRVNqT2RqRVhTVXR0RkdIUnVLck9CTGRiVHBya1RPa2NMVXJDTkFQaVNOVG5uV3JKcFNrQWVObFRJSnhlSmNFbnRtWENHbVRFSGF5elBhaWpGRkJ4dVV2eFRJcW55aEloWGhITm9OSnVFb3VNaEVqeVBPUGpTcHhud2x6cm5sb21YWk9ZU0FrdXJoZnJqYUlzQnVoV01qSFhCZnlhWGJ4c3psZWtHV09WbUl1T3ptUkpIc1BQY0hVQ0JiTUhHaE1DeUttREVXd2lnZXFVTEtTRGZ5VU5HZWlPZHRYSHBHbHVIUExlV1RBWXhQZ2lJQ1JSdmFEbnNFQkFtakNDY3BnR3FrTU12cllISWVHdVhLTEdUU0doZ1JCQXBYT0ZmSkRYRW1reFRMR0hkeWxocEpTRXZoV251Q093d1hxVmlOZElZc09mT2Fya1RGeGJsY1RKeUdsRVlhYlllUFVzT3JKeUxrSFhxVU9EcFpURE1xcW1CSk1Kbll1cXZLZGtTYkxoV1ZsVWVqSG5hc1Fwb0xMdUhURlZRVlhmZmdJWENHd2xRUXR6UnloV2pMdGlQbnFiUGF1S3RmQklTRGhDeVdWPC9zdXBwbGllck5hbWU+CiAgICAgICAgICAgICAgIDxzdXBwbGllckFkZHJlc3M+CiAgICAgICAgICAgICAgICAgIDxuczI6ZGV0YWlsZWRBZGRyZXNzPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmNvdW50cnlDb2RlPkhVPC9uczI6Y291bnRyeUNvZGU+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6cmVnaW9uPkLDqWvDqXM8L25zMjpyZWdpb24+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6cG9zdGFsQ29kZT41NjAwPC9uczI6cG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpjaXR5PmhwTExNN0U1cDB4bnZDTzNnQ05HZ3JFYnlWVklBWTwvbnMyOmNpdHk+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RyZWV0TmFtZT5CV21ZTVJQWXZxeXo0UjVzWVprRTJLajdWNmF0TkQ8L25zMjpzdHJlZXROYW1lPgogICAgICAgICAgICAgICAgICAgICA8bnMyOnB1YmxpY1BsYWNlQ2F0ZWdvcnk+M213SU5KMzQ4QzwvbnMyOnB1YmxpY1BsYWNlQ2F0ZWdvcnk+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6bnVtYmVyPjQwPC9uczI6bnVtYmVyPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmJ1aWxkaW5nPkJCPC9uczI6YnVpbGRpbmc+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RhaXJjYXNlPjk5PC9uczI6c3RhaXJjYXNlPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmZsb29yPjM8L25zMjpmbG9vcj4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpkb29yPjgwPC9uczI6ZG9vcj4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpsb3ROdW1iZXI+Mzk2ODMyPC9uczI6bG90TnVtYmVyPgogICAgICAgICAgICAgICAgICA8L25zMjpkZXRhaWxlZEFkZHJlc3M+CiAgICAgICAgICAgICAgIDwvc3VwcGxpZXJBZGRyZXNzPgogICAgICAgICAgICAgICA8c3VwcGxpZXJCYW5rQWNjb3VudE51bWJlcj4xMTExMTExMS0xMTExMTExMS0xMTExMTExMTwvc3VwcGxpZXJCYW5rQWNjb3VudE51bWJlcj4KICAgICAgICAgICAgICAgPGluZGl2aWR1YWxFeGVtcHRpb24+ZmFsc2U8L2luZGl2aWR1YWxFeGVtcHRpb24+CiAgICAgICAgICAgICAgIDxleGNpc2VMaWNlbmNlTnVtPlk2blBnTFI0dTl4MGQ2YzIwTWVzMFlzMXJMUVNmQ2VJY1RUazZYbDBFeXNKc1gxTUZSPC9leGNpc2VMaWNlbmNlTnVtPgogICAgICAgICAgICA8L3N1cHBsaWVySW5mbz4KICAgICAgICAgICAgPGN1c3RvbWVySW5mbz4KICAgICAgICAgICAgICAgPHByaXZhdGVQZXJzb25JbmRpY2F0b3I+ZmFsc2U8L3ByaXZhdGVQZXJzb25JbmRpY2F0b3I+CiAgICAgICAgICAgICAgIDxjdXN0b21lclZhdERhdGE+CiAgICAgICAgICAgICAgICAgIDxjdXN0b21lclRheE51bWJlcj4KICAgICAgICAgICAgICAgICAgICAgPG5zMjp0YXhwYXllcklkPjIyMjIyMjIyPC9uczI6dGF4cGF5ZXJJZD4KICAgICAgICAgICAgICAgICAgICAgPG5zMjp2YXRDb2RlPjE8L25zMjp2YXRDb2RlPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmNvdW50eUNvZGU+NTE8L25zMjpjb3VudHlDb2RlPgogICAgICAgICAgICAgICAgICA8L2N1c3RvbWVyVGF4TnVtYmVyPgogICAgICAgICAgICAgICA8L2N1c3RvbWVyVmF0RGF0YT4KICAgICAgICAgICAgICAgPGN1c3RvbWVyTmFtZT5RV2RtYXRmbUJZdkRvWk1lZ0JpanVrdlpaTlJWU21iZ3hYeHBmRFlhWHlpdFhWRG9xeHpqZFhvYkt3cHpienZCV0F2SXFRWWpya2N1elNRUWNwaHVmT2VwYUdBVnVZRFRSWHV0RVNpUllUYldBdURqVGJmQnRwWWdDRkhpdEpkT0N5RWNYVGh5U0hYYmR1UkVhWkpIWWxyYmpndUFuam5SUUxXRHFqQUN3d0hsaFpDdkVEVnJNUmhLSXdDUlBreVRQRkZsRkJVcUxTTVlvV3FObFJvc1dLZG5YanpaQ1JCTGppd0ZFWFJkY2NPVHhwc2lleVlzRVRudm1LQ1JJQmJtbllLa1dMVkJmVEZYYm1tR1B3VlBEZnpBZGxzRHNLdk1zeWl5c2F1WW5OZVVJSWtUWHhKc2VSckxFV2lFaGNpQ3pvYmJPT1VURXJscWl0bW5zQmRwa3hKVGZ6Qmd4VXlicEppd3dPTE9mc2JScmdZdmR2Y2RrcndweU1PSUNZcWFvbGNua3Vyc1JpaXhrY2t5WGZweVVOY29FZFZwelNsZGd4cW92VE1TSnJJcFdJeXpKbkFUT3RRVk5TTFZ5ZGNXZlZ3Vm9zbmlTR3VLV2lZUW5WZ0hldEZRSWVwR3ZweVRVUndiZVBFZ25kTFlKekhLb1lpTk9TYkhsRGFjVllFVjwvY3VzdG9tZXJOYW1lPgogICAgICAgICAgICAgICA8Y3VzdG9tZXJBZGRyZXNzPgogICAgICAgICAgICAgICAgICA8bnMyOmRldGFpbGVkQWRkcmVzcz4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpjb3VudHJ5Q29kZT5IVTwvbnMyOmNvdW50cnlDb2RlPgogICAgICAgICAgICAgICAgICAgICA8bnMyOnJlZ2lvbj5Cw6lrw6lzPC9uczI6cmVnaW9uPgogICAgICAgICAgICAgICAgICAgICA8bnMyOnBvc3RhbENvZGU+NTYwMDwvbnMyOnBvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6Y2l0eT50akllVEg4WUxWTkdiaXd3c3ZRQXJTNmZkMm9hSE48L25zMjpjaXR5PgogICAgICAgICAgICAgICAgICAgICA8bnMyOnN0cmVldE5hbWU+MVlYdUZkWU9xbTJnYTdzb3RzSTh6NFZNMVJmS0UyPC9uczI6c3RyZWV0TmFtZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpwdWJsaWNQbGFjZUNhdGVnb3J5PnFBbnkzWmFoRGs8L25zMjpwdWJsaWNQbGFjZUNhdGVnb3J5PgogICAgICAgICAgICAgICAgICAgICA8bnMyOm51bWJlcj40OTwvbnMyOm51bWJlcj4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpidWlsZGluZz5CQjwvbnMyOmJ1aWxkaW5nPgogICAgICAgICAgICAgICAgICAgICA8bnMyOnN0YWlyY2FzZT45OTwvbnMyOnN0YWlyY2FzZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpmbG9vcj43PC9uczI6Zmxvb3I+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6ZG9vcj4yOTwvbnMyOmRvb3I+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6bG90TnVtYmVyPjg2OTI1MDwvbnMyOmxvdE51bWJlcj4KICAgICAgICAgICAgICAgICAgPC9uczI6ZGV0YWlsZWRBZGRyZXNzPgogICAgICAgICAgICAgICA8L2N1c3RvbWVyQWRkcmVzcz4KICAgICAgICAgICAgICAgPGN1c3RvbWVyQmFua0FjY291bnROdW1iZXI+MTExMTExMTEtMTExMTExMTEtMjIyMjIyMjI8L2N1c3RvbWVyQmFua0FjY291bnROdW1iZXI+CiAgICAgICAgICAgIDwvY3VzdG9tZXJJbmZvPgogICAgICAgICAgICA8ZmlzY2FsUmVwcmVzZW50YXRpdmVJbmZvPgogICAgICAgICAgICAgICA8ZmlzY2FsUmVwcmVzZW50YXRpdmVUYXhOdW1iZXI+CiAgICAgICAgICAgICAgICAgIDxuczI6dGF4cGF5ZXJJZD41NTU1NTU1NTwvbnMyOnRheHBheWVySWQ+CiAgICAgICAgICAgICAgIDwvZmlzY2FsUmVwcmVzZW50YXRpdmVUYXhOdW1iZXI+CiAgICAgICAgICAgICAgIDxmaXNjYWxSZXByZXNlbnRhdGl2ZU5hbWU+M0JyYjBUM1JZSjlIWjlNN3c2MlFmQkZIRWs1ZmdEPC9maXNjYWxSZXByZXNlbnRhdGl2ZU5hbWU+CiAgICAgICAgICAgICAgIDxmaXNjYWxSZXByZXNlbnRhdGl2ZUFkZHJlc3M+CiAgICAgICAgICAgICAgICAgIDxuczI6ZGV0YWlsZWRBZGRyZXNzPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmNvdW50cnlDb2RlPkhVPC9uczI6Y291bnRyeUNvZGU+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6cmVnaW9uPkLDqWvDqXM8L25zMjpyZWdpb24+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6cG9zdGFsQ29kZT41NjAwPC9uczI6cG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpjaXR5PmhRbVdwWEpEc0tvckluNENJSHR2aUdoeGRFOGJjUTwvbnMyOmNpdHk+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RyZWV0TmFtZT42WGVzOXFOZkgwS1EzaW5TMnZjRExPQWw3NnpCTkI8L25zMjpzdHJlZXROYW1lPgogICAgICAgICAgICAgICAgICAgICA8bnMyOnB1YmxpY1BsYWNlQ2F0ZWdvcnk+QThDa2xPQkxENTwvbnMyOnB1YmxpY1BsYWNlQ2F0ZWdvcnk+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6bnVtYmVyPjMxPC9uczI6bnVtYmVyPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmJ1aWxkaW5nPkJCPC9uczI6YnVpbGRpbmc+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RhaXJjYXNlPjk5PC9uczI6c3RhaXJjYXNlPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmZsb29yPjE8L25zMjpmbG9vcj4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpkb29yPjg3PC9uczI6ZG9vcj4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpsb3ROdW1iZXI+MjM2MTcyPC9uczI6bG90TnVtYmVyPgogICAgICAgICAgICAgICAgICA8L25zMjpkZXRhaWxlZEFkZHJlc3M+CiAgICAgICAgICAgICAgIDwvZmlzY2FsUmVwcmVzZW50YXRpdmVBZGRyZXNzPgogICAgICAgICAgICA8L2Zpc2NhbFJlcHJlc2VudGF0aXZlSW5mbz4KICAgICAgICAgICAgPGludm9pY2VEZXRhaWw+CiAgICAgICAgICAgICAgIDxpbnZvaWNlQ2F0ZWdvcnk+Tk9STUFMPC9pbnZvaWNlQ2F0ZWdvcnk+CiAgICAgICAgICAgICAgIDxpbnZvaWNlRGVsaXZlcnlEYXRlPjIwMjAtMDktMDQ8L2ludm9pY2VEZWxpdmVyeURhdGU+CiAgICAgICAgICAgICAgIDxpbnZvaWNlRGVsaXZlcnlQZXJpb2RTdGFydD4yMDIwLTA5LTA0PC9pbnZvaWNlRGVsaXZlcnlQZXJpb2RTdGFydD4KICAgICAgICAgICAgICAgPGludm9pY2VEZWxpdmVyeVBlcmlvZEVuZD4yMDIwLTA5LTA0PC9pbnZvaWNlRGVsaXZlcnlQZXJpb2RFbmQ+CiAgICAgICAgICAgICAgIDxpbnZvaWNlQWNjb3VudGluZ0RlbGl2ZXJ5RGF0ZT4yMDIwLTA5LTA0PC9pbnZvaWNlQWNjb3VudGluZ0RlbGl2ZXJ5RGF0ZT4KICAgICAgICAgICAgICAgPHBlcmlvZGljYWxTZXR0bGVtZW50PnRydWU8L3BlcmlvZGljYWxTZXR0bGVtZW50PgogICAgICAgICAgICAgICA8c21hbGxCdXNpbmVzc0luZGljYXRvcj50cnVlPC9zbWFsbEJ1c2luZXNzSW5kaWNhdG9yPgogICAgICAgICAgICAgICA8Y3VycmVuY3lDb2RlPkhHUTwvY3VycmVuY3lDb2RlPgogICAgICAgICAgICAgICA8ZXhjaGFuZ2VSYXRlPjE8L2V4Y2hhbmdlUmF0ZT4KICAgICAgICAgICAgICAgPHV0aWxpdHlTZXR0bGVtZW50SW5kaWNhdG9yPmZhbHNlPC91dGlsaXR5U2V0dGxlbWVudEluZGljYXRvcj4KICAgICAgICAgICAgICAgPHNlbGZCaWxsaW5nSW5kaWNhdG9yPmZhbHNlPC9zZWxmQmlsbGluZ0luZGljYXRvcj4KICAgICAgICAgICAgICAgPHBheW1lbnRNZXRob2Q+Q0FTSDwvcGF5bWVudE1ldGhvZD4KICAgICAgICAgICAgICAgPHBheW1lbnREYXRlPjIwMjAtMDktMDQ8L3BheW1lbnREYXRlPgogICAgICAgICAgICAgICA8Y2FzaEFjY291bnRpbmdJbmRpY2F0b3I+dHJ1ZTwvY2FzaEFjY291bnRpbmdJbmRpY2F0b3I+CiAgICAgICAgICAgICAgIDxpbnZvaWNlQXBwZWFyYW5jZT5FTEVDVFJPTklDPC9pbnZvaWNlQXBwZWFyYW5jZT4KICAgICAgICAgICAgICAgPGFkZGl0aW9uYWxJbnZvaWNlRGF0YT4KICAgICAgICAgICAgICAgICAgPGRhdGFOYW1lPkExMjM0NV9BU0RBU0RBU0Q8L2RhdGFOYW1lPgogICAgICAgICAgICAgICAgICA8ZGF0YURlc2NyaXB0aW9uPmFOR0o5TEpDWnlpVHRoRkdoUWFkRDRTZHc3b21LRFBKQVZCNDk0ZjE2ZGk0YTl0YnJWT2MzRHdXNFNBWlEwQkZJRFdBeXRmWlNEeVpFQ2ZiUTQ5OVd0cW45WmQzMVV0cjlGTExZa0dpUGt0VDIxNW1Zb0F5RGgybXVUU1R4cnNVaE1mVFdCUjhIMHdaS0RpTGN4OXRjU1pKVE1xeFp6WkJOUTIyTWtWc3R4aVlGSndXRVowS1lqNmM0UXIya05TM1BqQ3A2REI5MDlGTnR1V296NzBHY2VQbnVBb3hGVUlmMjBYUVE3Uk1QbWhKZTQ5OUhCTUtHTWJtVnVLRUNGdzwvZGF0YURlc2NyaXB0aW9uPgogICAgICAgICAgICAgICAgICA8ZGF0YVZhbHVlPnpobkI0SWpKTVR6QndiR1N4c3lMdGZGc2FRMnpYdjJXdFNQU3FuTEFCYUlHczc0Z0VWS0RST0V6VmRhUVYyMHdhaG43RDUzeWdleVBKUXVwSHpzd3M5Y2VzbFBIeE1mQjMydTdWd1k0bk1wYkJGUEdxSDBJM1FBTDVndDhXNTlwaXVpdXpzeVNTa21KQTFjdVVuQ1p0TnNRMnJHMm9TeFdFZHVESm9zZmxvR09KSWFwQVVxZEtna1UxVVE5RVpma2l3eWFXWkM1eVFJdXd5eExGWmZsWTI2eDB0NFU2SmRHVlpqZWxzemtSN0ZjRzRXdTMxVDAyUllTQnd4RUh4eGxGU3QxN2pQb3JCTGpEdjlBdjBoMmxMc0lCeUtqcm5ZYmxqNTRZZE1KckZJVzRRckpwWjM3V05kODFkcExYOWNrSFU3ZFdwbDBhZjZvMjhMRXNMUVNVTHhRSWFUN1k0Y01nRDUwdThmbnVLM1lVWlhobktFSHZlTnN3WWRhNGUwMk1ycUNVamFxc2loYlp2WnR4Z05hSlRnQTYwY3RyaHZON3VnQ0EzUFpOdFk1UlRxZ2hkMnhEb1VTa2x6aDcxbzBVNkplZDVQbVEwNEJoTTltNjZDQ1BkZmZ6UGJTUUlDdTg5RmMzR3owVDUyaGdkZkxQVUhBQkg3dDBGYkRKQVA2PC9kYXRhVmFsdWU+CiAgICAgICAgICAgICAgIDwvYWRkaXRpb25hbEludm9pY2VEYXRhPgogICAgICAgICAgICA8L2ludm9pY2VEZXRhaWw+CiAgICAgICAgIDwvaW52b2ljZUhlYWQ+CiAgICAgICAgIDxpbnZvaWNlTGluZXM+CiAgICAgICAgICAgIDxtZXJnZWRJdGVtSW5kaWNhdG9yPmZhbHNlPC9tZXJnZWRJdGVtSW5kaWNhdG9yPgogICAgICAgICAgICA8bGluZT4KICAgICAgICAgICAgICAgPGxpbmVOdW1iZXI+MTwvbGluZU51bWJlcj4KICAgICAgICAgICAgICAgPGFkdmFuY2VEYXRhPgogICAgICAgICAgICAgICAgICA8YWR2YW5jZUluZGljYXRvcj50cnVlPC9hZHZhbmNlSW5kaWNhdG9yPgogICAgICAgICAgICAgICA8L2FkdmFuY2VEYXRhPgogICAgICAgICAgICAgICA8cHJvZHVjdENvZGVzPgogICAgICAgICAgICAgICAgICA8cHJvZHVjdENvZGU+CiAgICAgICAgICAgICAgICAgICAgIDxwcm9kdWN0Q29kZUNhdGVnb3J5PkFISzwvcHJvZHVjdENvZGVDYXRlZ29yeT4KICAgICAgICAgICAgICAgICAgICAgPHByb2R1Y3RDb2RlT3duVmFsdWU+WVZyenBrZlRrR2NOU0ZaUHV5S1l3eGhEVGVKZHFqcVNXWk5uQXZma2F4R3lsaG5kalNkSGhrc21zRHdjeEFLTXN4WVZETmdkbUlHeVpkU2p4Tk9rQ0VzVVNQQW1YUWVvVW9FSmV6U3FWUnNRSHFiTmxZcGZzeGZXWU1wem9TY3pVSVhYTExrU2x6VGVJRFdQT1VMRkpIZVBQVnB2UmxLZHpZTVFCT3RqRVlIUklZRU5ZcGxJU1dieEZmSkpkcGR4YmRmTEZaVmNCVUhLeXpMY3BSaU1aYkhNeEVuQlp1R2dmTnpiUGNPT1lGcmh1THBlUXFGeWZqZE93RnBTQk9oPC9wcm9kdWN0Q29kZU93blZhbHVlPgogICAgICAgICAgICAgICAgICA8L3Byb2R1Y3RDb2RlPgogICAgICAgICAgICAgICA8L3Byb2R1Y3RDb2Rlcz4KICAgICAgICAgICAgICAgPGxpbmVFeHByZXNzaW9uSW5kaWNhdG9yPmZhbHNlPC9saW5lRXhwcmVzc2lvbkluZGljYXRvcj4KICAgICAgICAgICAgICAgPGxpbmVOYXR1cmVJbmRpY2F0b3I+UFJPRFVDVDwvbGluZU5hdHVyZUluZGljYXRvcj4KICAgICAgICAgICAgICAgPGxpbmVEZXNjcmlwdGlvbj5aR0M4d1lqaEtyR3JSektNdWVZeTU5WEREeUpsdmllVEdYSHNJeFdQSThwcDlLYTB6WExyOU5qWDFoZURMekNrWHJuVjhITDVHZlZtRnJlSFpuM2pNc1BqVnVhZmFNWVdvUjlVOEFnVFBzeVFIcFFYd1lVdnFwTXNlYXE3RlJ4ak1VY2dOTEZ5d1EzS0RSZ1htUUZySTR3M0htbnpVUHgxd3R1cVlqUkRuVHVIV3lwUzBudUFDaHpwZDFzSGhHNFp6NHo5UVVhdTd3Q0FLNHRjTTlZaFlUYkpwMVgzM2pHRERBblRrenNISlAwdXkwU01PWHdBdDdUQUFyV25CN2VtTk5JQmU2M1dHNWx2UGVYNEpGbFI0UzBTRHZ0bG9NdjZzWnZReFIyajNLelpuR3VCcTREc1F3cUdNY3A3SzZ5eU1YOGRHS2lHVTNhYjNjVnRtWVFDY2pVZjZoTWwwaTJ4YnJ4ZmxSWGZWSmJNbFI1Z1VkYXMycTVkTlBRMWlROG1UZTRpMjVWTUxyOGxmVG1QSGpia0hnQ3V3TXczOWFadXhMa0wwa1VwUmdvZ3RDVVQ4b20yUnZvdDExVzBNNnJhZUNLT3VoMkw2MTZOTVdMS21uUWZJcUlNU3ZkNkN3R3YxdlpHUE8wNmpSUlZyY2pUZThMZXZiZHJERVY2dDVMSzwvbGluZURlc2NyaXB0aW9uPgogICAgICAgICAgICAgICA8cXVhbnRpdHk+ODwvcXVhbnRpdHk+CiAgICAgICAgICAgICAgIDx1bml0T2ZNZWFzdXJlPk9XTjwvdW5pdE9mTWVhc3VyZT4KICAgICAgICAgICAgICAgPHVuaXRPZk1lYXN1cmVPd24+MUJSMVhIV1NEQUw3blNLdDNFTXRtZGV0dFNOR0RSVU9IcEFYWmw2RWNueEJreGxjZEs8L3VuaXRPZk1lYXN1cmVPd24+CiAgICAgICAgICAgICAgIDx1bml0UHJpY2U+MjAwPC91bml0UHJpY2U+CiAgICAgICAgICAgICAgIDx1bml0UHJpY2VIVUY+MjAwPC91bml0UHJpY2VIVUY+CiAgICAgICAgICAgICAgIDxsaW5lRGlzY291bnREYXRhPgogICAgICAgICAgICAgICAgICA8ZGlzY291bnREZXNjcmlwdGlvbj50ZXN6dDwvZGlzY291bnREZXNjcmlwdGlvbj4KICAgICAgICAgICAgICAgICAgPGRpc2NvdW50VmFsdWU+MTwvZGlzY291bnRWYWx1ZT4KICAgICAgICAgICAgICAgICAgPGRpc2NvdW50UmF0ZT4xPC9kaXNjb3VudFJhdGU+CiAgICAgICAgICAgICAgIDwvbGluZURpc2NvdW50RGF0YT4KICAgICAgICAgICAgICAgPGxpbmVBbW91bnRzTm9ybWFsPgogICAgICAgICAgICAgICAgICA8bGluZU5ldEFtb3VudERhdGE+CiAgICAgICAgICAgICAgICAgICAgIDxsaW5lTmV0QW1vdW50PjE2MDA8L2xpbmVOZXRBbW91bnQ+CiAgICAgICAgICAgICAgICAgICAgIDxsaW5lTmV0QW1vdW50SFVGPjE2MDA8L2xpbmVOZXRBbW91bnRIVUY+CiAgICAgICAgICAgICAgICAgIDwvbGluZU5ldEFtb3VudERhdGE+CiAgICAgICAgICAgICAgICAgIDxsaW5lVmF0UmF0ZT4KICAgICAgICAgICAgICAgICAgICAgPHZhdFBlcmNlbnRhZ2U+MC4yNTwvdmF0UGVyY2VudGFnZT4KICAgICAgICAgICAgICAgICAgPC9saW5lVmF0UmF0ZT4KICAgICAgICAgICAgICAgICAgPGxpbmVWYXREYXRhPgogICAgICAgICAgICAgICAgICAgICA8bGluZVZhdEFtb3VudD40MDA8L2xpbmVWYXRBbW91bnQ+CiAgICAgICAgICAgICAgICAgICAgIDxsaW5lVmF0QW1vdW50SFVGPjQwMDwvbGluZVZhdEFtb3VudEhVRj4KICAgICAgICAgICAgICAgICAgPC9saW5lVmF0RGF0YT4KICAgICAgICAgICAgICAgICAgPGxpbmVHcm9zc0Ftb3VudERhdGE+CiAgICAgICAgICAgICAgICAgICAgIDxsaW5lR3Jvc3NBbW91bnROb3JtYWw+MjAwMDwvbGluZUdyb3NzQW1vdW50Tm9ybWFsPgogICAgICAgICAgICAgICAgICAgICA8bGluZUdyb3NzQW1vdW50Tm9ybWFsSFVGPjIwMDA8L2xpbmVHcm9zc0Ftb3VudE5vcm1hbEhVRj4KICAgICAgICAgICAgICAgICAgPC9saW5lR3Jvc3NBbW91bnREYXRhPgogICAgICAgICAgICAgICA8L2xpbmVBbW91bnRzTm9ybWFsPgogICAgICAgICAgICAgICA8aW50ZXJtZWRpYXRlZFNlcnZpY2U+dHJ1ZTwvaW50ZXJtZWRpYXRlZFNlcnZpY2U+CiAgICAgICAgICAgICAgIDxuZXdUcmFuc3BvcnRNZWFuPgogICAgICAgICAgICAgICAgICA8Zmlyc3RFbnRyeUludG9TZXJ2aWNlPjIwMjAtMDktMDQ8L2ZpcnN0RW50cnlJbnRvU2VydmljZT4KICAgICAgICAgICAgICAgICAgPHZlaGljbGU+CiAgICAgICAgICAgICAgICAgICAgIDxlbmdpbmVDYXBhY2l0eT4xMjM0NTY3ODkwMTIuMTIzNDU2Nzg5MTwvZW5naW5lQ2FwYWNpdHk+CiAgICAgICAgICAgICAgICAgICAgIDxlbmdpbmVQb3dlcj4xMjM0NTY3ODkwMTIuMTIzNDU2Nzg5MTwvZW5naW5lUG93ZXI+CiAgICAgICAgICAgICAgICAgICAgIDxrbXM+MTIzNDU2Nzg5MDEyLjEyMzQ1Njc4OTE8L2ttcz4KICAgICAgICAgICAgICAgICAgPC92ZWhpY2xlPgogICAgICAgICAgICAgICA8L25ld1RyYW5zcG9ydE1lYW4+CiAgICAgICAgICAgICAgIDxkZXBvc2l0SW5kaWNhdG9yPnRydWU8L2RlcG9zaXRJbmRpY2F0b3I+CiAgICAgICAgICAgICAgIDxvYmxpZ2F0ZWRGb3JQcm9kdWN0RmVlPnRydWU8L29ibGlnYXRlZEZvclByb2R1Y3RGZWU+CiAgICAgICAgICAgICAgIDxHUENFeGNpc2U+MTAwPC9HUENFeGNpc2U+CiAgICAgICAgICAgICAgIDxkaWVzZWxPaWxQdXJjaGFzZT4KICAgICAgICAgICAgICAgICAgPHB1cmNoYXNlTG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6Y291bnRyeUNvZGU+QVo8L25zMjpjb3VudHJ5Q29kZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpyZWdpb24+RnZxSUxSeW9pYmVndUVNb1NCWHBPbVRvSFNhU2xsTElyZWN4Q3hwaGVaV0lsSVZRa0o8L25zMjpyZWdpb24+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6cG9zdGFsQ29kZT5BQUEwPC9uczI6cG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpjaXR5PnJXdFZVZ2lRUEdxVVBCV3hYRElmRUtUdVpoa2ZLRUZmVGtBbmRIY3ZXaWlja3lGRFJjd2ZVc3RNSW15UVd2UXdjSmVBdVlKRHR5U2tyY3V5TmJwem14RnZraEt2aXlkSllQVWFuYUtrcFVsdUhrbWZHR2J2RFRzeGZuR0JKYVVxanNPeHNLYldLT3VJdUNSR05lU0FHdFFzUFBSUVhidUxWTkZFZHVxT2ZUd29TekR3RWNyQW5qWnF3TXpDQWZOWVpPS2JZb1p4ZUNSSm5WYmFUWnhBSEVEZ1FKT3hWQXRJVVlrSU9yanJDTkRPamtVTXZDUWJLZmlLQ0JhVGRhTzwvbnMyOmNpdHk+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6YWRkaXRpb25hbEFkZHJlc3NEZXRhaWw+eWJUcXp5Z3ZqeW9Cb2xtSEV5ZUV1Y3JQTW1VRGhCa0tCVnNRdkRDdGZhSlJNd1RBQU9YS013dm1hQkx0ZXdmSm9oRWJ2VFZxRG1lUHhPZlBTb2VYQ2pqR0NGTWdvZkNsSnFTZnl2dFJQVGJQTVNYcHV4Wk1DZ2ZnclRaam9UV3VUREd1d3RzWGZFbWdHZmljZ1JsU3luWXhXUklaanZneE5uaEpjQldLcE1LVWZqcVNIQVlldlZhc0tXcmVrdVlUYlpQbnJ2aFFYTGVYUkVnWnpBQXVrekFxd3hHcExzaVJCVHpDcWFnTnhTalh1b2VIQVZVTmNWTE9ydnJOZ3dOPC9uczI6YWRkaXRpb25hbEFkZHJlc3NEZXRhaWw+CiAgICAgICAgICAgICAgICAgIDwvcHVyY2hhc2VMb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPHB1cmNoYXNlRGF0ZT4yMDIwLTA5LTA0PC9wdXJjaGFzZURhdGU+CiAgICAgICAgICAgICAgICAgIDx2ZWhpY2xlUmVnaXN0cmF0aW9uTnVtYmVyPkFaPC92ZWhpY2xlUmVnaXN0cmF0aW9uTnVtYmVyPgogICAgICAgICAgICAgICAgICA8ZGllc2VsT2lsUXVhbnRpdHk+MTIzNDU2Nzg5MDEyLjEyMzQ1Njc4OTE8L2RpZXNlbE9pbFF1YW50aXR5PgogICAgICAgICAgICAgICA8L2RpZXNlbE9pbFB1cmNoYXNlPgogICAgICAgICAgICAgICA8bmV0YURlY2xhcmF0aW9uPmZhbHNlPC9uZXRhRGVjbGFyYXRpb24+CiAgICAgICAgICAgICAgIDxwcm9kdWN0RmVlQ2xhdXNlPgogICAgICAgICAgICAgICAgICA8Y3VzdG9tZXJEZWNsYXJhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgPHByb2R1Y3RTdHJlYW0+UExBU1RJQzwvcHJvZHVjdFN0cmVhbT4KICAgICAgICAgICAgICAgICAgICAgPHByb2R1Y3RGZWVXZWlnaHQ+MTwvcHJvZHVjdEZlZVdlaWdodD4KICAgICAgICAgICAgICAgICAgPC9jdXN0b21lckRlY2xhcmF0aW9uPgogICAgICAgICAgICAgICA8L3Byb2R1Y3RGZWVDbGF1c2U+CiAgICAgICAgICAgICAgIDxsaW5lUHJvZHVjdEZlZUNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgIDxwcm9kdWN0RmVlQ29kZT4KICAgICAgICAgICAgICAgICAgICAgPHByb2R1Y3RDb2RlQ2F0ZWdvcnk+Q1NLPC9wcm9kdWN0Q29kZUNhdGVnb3J5PgogICAgICAgICAgICAgICAgICAgICA8cHJvZHVjdENvZGVWYWx1ZT5BWjA5PC9wcm9kdWN0Q29kZVZhbHVlPgogICAgICAgICAgICAgICAgICA8L3Byb2R1Y3RGZWVDb2RlPgogICAgICAgICAgICAgICAgICA8cHJvZHVjdEZlZVF1YW50aXR5PjE8L3Byb2R1Y3RGZWVRdWFudGl0eT4KICAgICAgICAgICAgICAgICAgPHByb2R1Y3RGZWVNZWFzdXJpbmdVbml0PkRBUkFCPC9wcm9kdWN0RmVlTWVhc3VyaW5nVW5pdD4KICAgICAgICAgICAgICAgICAgPHByb2R1Y3RGZWVSYXRlPjQwMDwvcHJvZHVjdEZlZVJhdGU+CiAgICAgICAgICAgICAgICAgIDxwcm9kdWN0RmVlQW1vdW50PjQwMDwvcHJvZHVjdEZlZUFtb3VudD4KICAgICAgICAgICAgICAgPC9saW5lUHJvZHVjdEZlZUNvbnRlbnQ+CiAgICAgICAgICAgICAgIDxhZGRpdGlvbmFsTGluZURhdGE+CiAgICAgICAgICAgICAgICAgIDxkYXRhTmFtZT5BMTIzNDVfQVNEQVNEQVNEPC9kYXRhTmFtZT4KICAgICAgICAgICAgICAgICAgPGRhdGFEZXNjcmlwdGlvbj5BRHkwYWVPeDRNUTZna3h4b0ljZWRveXVKaGNHM2ZaNTRScmNibURDZ29Ma1o1aEZ6a3k4amxwVGs4TWgxYnZGRUJ3U0FBajFWeWVsY1I1UnQ5MjRyZ3dPS0JSU0hWM0VjWW1nWnBjQXRiZDZlSXRjdXFFbVJPRjlQOW8wbWt6b1JOOUVjbzJjaVNkQWRjcUFwZ2dTUkJCa3g4RGZDV0Z2RWZjUGp1VmlQNnZqRGNIeXViODBQdTQwYkxmMkNmWTl1aGx4aG1XdFJnNnY0d2VUU05xVkZiVHQyTENMT2R5S1FldFRJbWpLaXB1NjNFN2UyWWhJSEw0U3BiWVlCOEY8L2RhdGFEZXNjcmlwdGlvbj4KICAgICAgICAgICAgICAgICAgPGRhdGFWYWx1ZT5zSWQxR2JYZ2xHdjlKblFWNkZGNmZGMkNEM1k4aXBHbDlFR29rWjl0THp0MTFWcVNFdEI5QU9VRmxnaTU4VlR0bG5JcWl3dmRJd2VrbzRvdkpwSmU5VTJoZEdoejlFUVFpSVh2SXRFTWNJbmRPc1ZtV3FmbXl5YkprTW83U1lOWHBxSDNMRVVMQXZubHY3VTlQaDZTdzJXRkFzQUlNTmg2djFDaW1FNHJZSEJxcktjYTFrckh2RG5jVzZHQzhuOWxTUUs1YVpXRHl5ZWljd0hCdjB0U3h1RnBjVFY2OUtkWmpGdFQ1MGhIaGFpQnlpS0NDSUxSOWZzRTVTZWRGeVNsN0ZKazFYQWdVTFdnMWo3Z3VWUVpEbFJSN1ZRVHNrZVlCSldZcW9KeXRKR0hvczExajNWSUNwMFpqNmZGSXEya2pLakQ5TTltcUdmUlpxRU4xeTlXckFYVEUwbGM1bDlHMkdxWmtxU0N0S3dkY3huczRYbXVRUk5zcG5MQkdqZDR4bGdsWDlmYnF2cm5WRFZTbWRQdFpPbzUyVzF4NWoxWUNPU0dtMGRKSHBEa2hXNHQyTzM2aEhoZ2JHS3gxVldmODFOcEpuUlFKQkZhUWY5OERqeElXVEpMSHNiT1pJa2tFTDhyT3ZzMkpIcGk1VUQ4UWtyYWNJSVdhNThLQzlmYjwvZGF0YVZhbHVlPgogICAgICAgICAgICAgICA8L2FkZGl0aW9uYWxMaW5lRGF0YT4KICAgICAgICAgICAgPC9saW5lPgogICAgICAgICA8L2ludm9pY2VMaW5lcz4KICAgICAgICAgPHByb2R1Y3RGZWVTdW1tYXJ5PgogICAgICAgICAgICA8cHJvZHVjdEZlZU9wZXJhdGlvbj5ERVBPU0lUPC9wcm9kdWN0RmVlT3BlcmF0aW9uPgogICAgICAgICAgICA8cHJvZHVjdEZlZURhdGE+CiAgICAgICAgICAgICAgIDxwcm9kdWN0RmVlQ29kZT4KICAgICAgICAgICAgICAgICAgPHByb2R1Y3RDb2RlQ2F0ZWdvcnk+Q1NLPC9wcm9kdWN0Q29kZUNhdGVnb3J5PgogICAgICAgICAgICAgICAgICA8cHJvZHVjdENvZGVWYWx1ZT5BWjA5PC9wcm9kdWN0Q29kZVZhbHVlPgogICAgICAgICAgICAgICA8L3Byb2R1Y3RGZWVDb2RlPgogICAgICAgICAgICAgICA8cHJvZHVjdEZlZVF1YW50aXR5PjE8L3Byb2R1Y3RGZWVRdWFudGl0eT4KICAgICAgICAgICAgICAgPHByb2R1Y3RGZWVNZWFzdXJpbmdVbml0PkRBUkFCPC9wcm9kdWN0RmVlTWVhc3VyaW5nVW5pdD4KICAgICAgICAgICAgICAgPHByb2R1Y3RGZWVSYXRlPjQwMDwvcHJvZHVjdEZlZVJhdGU+CiAgICAgICAgICAgICAgIDxwcm9kdWN0RmVlQW1vdW50PjQwMDwvcHJvZHVjdEZlZUFtb3VudD4KICAgICAgICAgICAgPC9wcm9kdWN0RmVlRGF0YT4KICAgICAgICAgICAgPHByb2R1Y3RDaGFyZ2VTdW0+NDAwPC9wcm9kdWN0Q2hhcmdlU3VtPgogICAgICAgICAgICA8cGF5bWVudEV2aWRlbmNlRG9jdW1lbnREYXRhPgogICAgICAgICAgICAgICA8ZXZpZGVuY2VEb2N1bWVudE5vPkUzc0lxTHJkV1QzeVVyczBHSlJ3QWcxc2lEbTI3YTJaY3VnQjcyTmFFakV3Uzc4NkZ3PC9ldmlkZW5jZURvY3VtZW50Tm8+CiAgICAgICAgICAgICAgIDxldmlkZW5jZURvY3VtZW50RGF0ZT4yMDIwLTA5LTA0PC9ldmlkZW5jZURvY3VtZW50RGF0ZT4KICAgICAgICAgICAgICAgPG9ibGlnYXRlZE5hbWU+VkFWNVh3VlRkSHZPTFpreDVEa2VtTXZ2YUdBd05BWnVrMEdIUDBEcFh4eEdOa1NINkl2UTJtOEtCcnZoRUpuRGN6cERBZmtQVkpPSk11SXpRNDk4RXlLNU9xM283VGJzcHNVWTFRS1NDYTZIVUhKbHY3b2NWTGRnbDNTbVh6Z3RxN1U1U2drSjZQNTFNT2I0ZWsxQzB2MVdYMk4wTmZ1eTBqTUVCZDZDSnlZeDdqeGVNQkpHaXlMRHpvblVoTkNTSmhraGtlQW4yeFc5VjBFSXpFQzhCS2hPREk0emZyVG1BQ29XdzFIdUNvY1VBZloyS0JsNEdKd0lCMUNyNENyPC9vYmxpZ2F0ZWROYW1lPgogICAgICAgICAgICAgICA8b2JsaWdhdGVkQWRkcmVzcz4KICAgICAgICAgICAgICAgICAgPG5zMjpzaW1wbGVBZGRyZXNzPgogICAgICAgICAgICAgICAgICAgICA8bnMyOmNvdW50cnlDb2RlPkFaPC9uczI6Y291bnRyeUNvZGU+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6cmVnaW9uPndDQ2dGanJNcm14RnZMbHhzRE5ucExucHlXSHd5WXhXa2xyaW1yUkpkc1BHQXV6UmtEPC9uczI6cmVnaW9uPgogICAgICAgICAgICAgICAgICAgICA8bnMyOnBvc3RhbENvZGU+QUFBMDwvbnMyOnBvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6Y2l0eT5JVHF0VlFpck1VenB1c1NGTWtpTmlSSUhJS0xiZlBBc3ByWGZneG51TVN1Y051WUt3TEZPa3FlZGhISHV1aW51TnhNYVRrR2VjYUtodFhLZGZSZ3poZ1lwTmZpb0R2WWNpTGR3dldNVlRxZm9MSXZJdFlnWEFzWVl1Q250bWVNbXd0UkJRaG9XREh4dk1UQWNybWRzQUtwa29HWld4bG12TkZDVGhZYlJDVWNET3dKcGFIR05EV3lRUHJKVVhVZnREcFBPTk13TFhBYmlicm9sZEV3cGtNQ0FnVEFBallnZ2xzTnBpVk1qd3hvZGJGQ0tzY2xVUGNXdGhodm9RRlE8L25zMjpjaXR5PgogICAgICAgICAgICAgICAgICAgICA8bnMyOmFkZGl0aW9uYWxBZGRyZXNzRGV0YWlsPnZGYkpZRkF0bnBiUlRwa2NPUmNjQm9LTVl4a1ZJSVFRZUhKUm96TkZRVWh2dVJqVFFGdWdLaXBPYk1LSWhqdmpsZWFKa3hFWFRyUW1Ka0FWc2dhR1pPUVZMSXl4ZGVjSlNTbHZ0aVJ6elBSWEFXTUJmVlJIZWVzalN5R2p3QUR0RmpNQlFqTXJLWVZyREN2TEZPR3BYRkZGTnN5TlhJZ0pYcENDVnBWVk5RT0tqUWFhdXVBZHhVblpwS2lUWElOc1hqc2tRQXdvVkVRSFFKR09LS2xvRnJHcHZZR3ZhU0lDVXBkb29OVklkV3RCcm9mc2twQUx1eldpTllHaW1aaTwvbnMyOmFkZGl0aW9uYWxBZGRyZXNzRGV0YWlsPgogICAgICAgICAgICAgICAgICA8L25zMjpzaW1wbGVBZGRyZXNzPgogICAgICAgICAgICAgICA8L29ibGlnYXRlZEFkZHJlc3M+CiAgICAgICAgICAgICAgIDxvYmxpZ2F0ZWRUYXhOdW1iZXI+CiAgICAgICAgICAgICAgICAgIDxuczI6dGF4cGF5ZXJJZD4xMTExMTExMTwvbnMyOnRheHBheWVySWQ+CiAgICAgICAgICAgICAgICAgIDxuczI6dmF0Q29kZT4zPC9uczI6dmF0Q29kZT4KICAgICAgICAgICAgICAgICAgPG5zMjpjb3VudHlDb2RlPjUxPC9uczI6Y291bnR5Q29kZT4KICAgICAgICAgICAgICAgPC9vYmxpZ2F0ZWRUYXhOdW1iZXI+CiAgICAgICAgICAgIDwvcGF5bWVudEV2aWRlbmNlRG9jdW1lbnREYXRhPgogICAgICAgICA8L3Byb2R1Y3RGZWVTdW1tYXJ5PgogICAgICAgICA8cHJvZHVjdEZlZVN1bW1hcnk+CiAgICAgICAgICAgIDxwcm9kdWN0RmVlT3BlcmF0aW9uPkRFUE9TSVQ8L3Byb2R1Y3RGZWVPcGVyYXRpb24+CiAgICAgICAgICAgIDxwcm9kdWN0RmVlRGF0YT4KICAgICAgICAgICAgICAgPHByb2R1Y3RGZWVDb2RlPgogICAgICAgICAgICAgICAgICA8cHJvZHVjdENvZGVDYXRlZ29yeT5DU0s8L3Byb2R1Y3RDb2RlQ2F0ZWdvcnk+CiAgICAgICAgICAgICAgICAgIDxwcm9kdWN0Q29kZVZhbHVlPkFaMDk8L3Byb2R1Y3RDb2RlVmFsdWU+CiAgICAgICAgICAgICAgIDwvcHJvZHVjdEZlZUNvZGU+CiAgICAgICAgICAgICAgIDxwcm9kdWN0RmVlUXVhbnRpdHk+MTwvcHJvZHVjdEZlZVF1YW50aXR5PgogICAgICAgICAgICAgICA8cHJvZHVjdEZlZU1lYXN1cmluZ1VuaXQ+REFSQUI8L3Byb2R1Y3RGZWVNZWFzdXJpbmdVbml0PgogICAgICAgICAgICAgICA8cHJvZHVjdEZlZVJhdGU+NDAwPC9wcm9kdWN0RmVlUmF0ZT4KICAgICAgICAgICAgICAgPHByb2R1Y3RGZWVBbW91bnQ+NDAwPC9wcm9kdWN0RmVlQW1vdW50PgogICAgICAgICAgICA8L3Byb2R1Y3RGZWVEYXRhPgogICAgICAgICAgICA8cHJvZHVjdENoYXJnZVN1bT40MDA8L3Byb2R1Y3RDaGFyZ2VTdW0+CiAgICAgICAgICAgIDxwYXltZW50RXZpZGVuY2VEb2N1bWVudERhdGE+CiAgICAgICAgICAgICAgIDxldmlkZW5jZURvY3VtZW50Tm8+RllyR2pwZERpNFZoNDJheVB2NzRMVjRNaXczM2hObEdPWHpkU1JINThkM25iQkU5NTA8L2V2aWRlbmNlRG9jdW1lbnRObz4KICAgICAgICAgICAgICAgPGV2aWRlbmNlRG9jdW1lbnREYXRlPjIwMjAtMDktMDQ8L2V2aWRlbmNlRG9jdW1lbnREYXRlPgogICAgICAgICAgICAgICA8b2JsaWdhdGVkTmFtZT5jdHpKRHJmUzFWV0NaRHhESTRDZ054ZnRNTWlEM2M1Um1SZUxpUEo2a0Y4QU5qSU1FRlhTekpid2J6dW1yOFltU0tTcXVvRU9yMmk0VTJYaDNnS3N5TXUyRkR0VEplU2tWa3ZFUFg5SW9jU2x4cXF4cE1Od0JHWnd6UFlhS2N2MkN0dFNVdzZKRlBkMVdDcVJWUGxPZWx5NWFDWWZuWUtJblp0S29sVW9OOHVGVDNYZVU2VFdvQm1lcDBrR3lOUzU5czdOZlBVRnFFNEY4Zm1Sa0J5cDlabWdMSms3bkxrcDZHeWN3enU1eEl6Q2JXczBuczBYVldweWVrdFVmeVU8L29ibGlnYXRlZE5hbWU+CiAgICAgICAgICAgICAgIDxvYmxpZ2F0ZWRBZGRyZXNzPgogICAgICAgICAgICAgICAgICA8bnMyOnNpbXBsZUFkZHJlc3M+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6Y291bnRyeUNvZGU+QVo8L25zMjpjb3VudHJ5Q29kZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpyZWdpb24+ZXF3UXhBcmFWeHBnc0VCSlVXdllYYU5xZXRtYnNOaGp6THFwYndjRGhlSHBhZVFzVGM8L25zMjpyZWdpb24+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6cG9zdGFsQ29kZT5BQUEwPC9uczI6cG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAgPG5zMjpjaXR5PmhZSUFMQWRNQVVIaGJKREhtbEduTWxVZGdLeVdNemp1UUtzd3RxYndvaW1Eak94UW1FWlpxZUFMZ0JwVGRSeUhOTWdobHRnbnlTUE1EbWhUT254alBDQ3pXVktxc0lEa3dsS2JVaUZZb0VhQVdscENJVndMWGdnZUVRVFVLY2tTRUFNSFFwa2dsRVliRm54akR6Sk9DaGJNV1h0RFh6VEhtVFdrSlZVYVNTQVdraUdjaVRQdlN1bmJiVHR1cHhHRFBWcHV2R3dKZ1Blbm5mRmxxcWdRaUlNVmpLTWp3U2lQVlZoTUdTc016TnVpZUdSdWJ2d1pYbkVzWkJHVWlWRzwvbnMyOmNpdHk+CiAgICAgICAgICAgICAgICAgICAgIDxuczI6YWRkaXRpb25hbEFkZHJlc3NEZXRhaWw+VVF3TFlIcUhyRGZYWVJ5YUl2ZmZkTWVaUW5VUWpGTXZDeGhSRmlPcW5jUXBEamZrakJ0RkRmdVp2U253c2dURnpEbEtYeUJ3RXlTWEJGekhCZUVVQ1hWVEhCUXJRZnptdEVLdGtId1ZTaG9yZXVVY2ZIZkNvSnZtZ0tWWXlrQU5lRG5UWmdtanpoZFhsbE9GaVNpYnlxemxZbnN5TlpSTVByVE10SllxTGZuTFpnUlBZZ3FWbGZDckVKVGdQRmV4bElKZnBkdXVIZ0NNZUJkYmxiZlVaUExLblB6VmNNaXVtcGdDSG5McFdQU1F3T2F2Vm5zT1dWcmp1akRtUURNPC9uczI6YWRkaXRpb25hbEFkZHJlc3NEZXRhaWw+CiAgICAgICAgICAgICAgICAgIDwvbnMyOnNpbXBsZUFkZHJlc3M+CiAgICAgICAgICAgICAgIDwvb2JsaWdhdGVkQWRkcmVzcz4KICAgICAgICAgICAgICAgPG9ibGlnYXRlZFRheE51bWJlcj4KICAgICAgICAgICAgICAgICAgPG5zMjp0YXhwYXllcklkPjExMTExMTExPC9uczI6dGF4cGF5ZXJJZD4KICAgICAgICAgICAgICAgICAgPG5zMjp2YXRDb2RlPjM8L25zMjp2YXRDb2RlPgogICAgICAgICAgICAgICAgICA8bnMyOmNvdW50eUNvZGU+NTE8L25zMjpjb3VudHlDb2RlPgogICAgICAgICAgICAgICA8L29ibGlnYXRlZFRheE51bWJlcj4KICAgICAgICAgICAgPC9wYXltZW50RXZpZGVuY2VEb2N1bWVudERhdGE+CiAgICAgICAgIDwvcHJvZHVjdEZlZVN1bW1hcnk+CiAgICAgICAgIDxpbnZvaWNlU3VtbWFyeT4KICAgICAgICAgICAgPHN1bW1hcnlOb3JtYWw+CiAgICAgICAgICAgICAgIDxzdW1tYXJ5QnlWYXRSYXRlPgogICAgICAgICAgICAgICAgICA8dmF0UmF0ZT4KICAgICAgICAgICAgICAgICAgICAgPHZhdFBlcmNlbnRhZ2U+MC4yNTwvdmF0UGVyY2VudGFnZT4KICAgICAgICAgICAgICAgICAgPC92YXRSYXRlPgogICAgICAgICAgICAgICAgICA8dmF0UmF0ZU5ldERhdGE+CiAgICAgICAgICAgICAgICAgICAgIDx2YXRSYXRlTmV0QW1vdW50PjE2MDA8L3ZhdFJhdGVOZXRBbW91bnQ+CiAgICAgICAgICAgICAgICAgICAgIDx2YXRSYXRlTmV0QW1vdW50SFVGPjE2MDA8L3ZhdFJhdGVOZXRBbW91bnRIVUY+CiAgICAgICAgICAgICAgICAgIDwvdmF0UmF0ZU5ldERhdGE+CiAgICAgICAgICAgICAgICAgIDx2YXRSYXRlVmF0RGF0YT4KICAgICAgICAgICAgICAgICAgICAgPHZhdFJhdGVWYXRBbW91bnQ+NDAwPC92YXRSYXRlVmF0QW1vdW50PgogICAgICAgICAgICAgICAgICAgICA8dmF0UmF0ZVZhdEFtb3VudEhVRj40MDA8L3ZhdFJhdGVWYXRBbW91bnRIVUY+CiAgICAgICAgICAgICAgICAgIDwvdmF0UmF0ZVZhdERhdGE+CiAgICAgICAgICAgICAgICAgIDx2YXRSYXRlR3Jvc3NEYXRhPgogICAgICAgICAgICAgICAgICAgICA8dmF0UmF0ZUdyb3NzQW1vdW50PjIwMDA8L3ZhdFJhdGVHcm9zc0Ftb3VudD4KICAgICAgICAgICAgICAgICAgICAgPHZhdFJhdGVHcm9zc0Ftb3VudEhVRj4yMDAwPC92YXRSYXRlR3Jvc3NBbW91bnRIVUY+CiAgICAgICAgICAgICAgICAgIDwvdmF0UmF0ZUdyb3NzRGF0YT4KICAgICAgICAgICAgICAgPC9zdW1tYXJ5QnlWYXRSYXRlPgogICAgICAgICAgICAgICA8aW52b2ljZU5ldEFtb3VudD4xNjAwPC9pbnZvaWNlTmV0QW1vdW50PgogICAgICAgICAgICAgICA8aW52b2ljZU5ldEFtb3VudEhVRj4xNjAwPC9pbnZvaWNlTmV0QW1vdW50SFVGPgogICAgICAgICAgICAgICA8aW52b2ljZVZhdEFtb3VudD40MDA8L2ludm9pY2VWYXRBbW91bnQ+CiAgICAgICAgICAgICAgIDxpbnZvaWNlVmF0QW1vdW50SFVGPjQwMDwvaW52b2ljZVZhdEFtb3VudEhVRj4KICAgICAgICAgICAgPC9zdW1tYXJ5Tm9ybWFsPgogICAgICAgICAgICA8c3VtbWFyeUdyb3NzRGF0YT4KICAgICAgICAgICAgICAgPGludm9pY2VHcm9zc0Ftb3VudD4yMDAwPC9pbnZvaWNlR3Jvc3NBbW91bnQ+CiAgICAgICAgICAgICAgIDxpbnZvaWNlR3Jvc3NBbW91bnRIVUY+MjAwMDwvaW52b2ljZUdyb3NzQW1vdW50SFVGPgogICAgICAgICAgICA8L3N1bW1hcnlHcm9zc0RhdGE+CiAgICAgICAgIDwvaW52b2ljZVN1bW1hcnk+CiAgICAgIDwvaW52b2ljZT4KICAgPC9pbnZvaWNlTWFpbj4KPC9JbnZvaWNlRGF0YT4=</invoiceData>
			<electronicInvoiceHash cryptoType="SHA3-512">44423BA28A8988AD2091EF009DB7682730630961617D04657F1C645FACC649FEAC52B9ACE0ACE6ED1C07AC85823161EAAFF78EDE98F34512C6AF5049B40B6FB7</electronicInvoiceHash>
		</invoiceOperation>
		<invoiceOperation>
			<index>3</index>
			<invoiceOperation>CREATE</invoiceOperation>
			<invoiceData></invoiceData>
			<electronicInvoiceHash cryptoType="SHA3-512">1F1C1E8BDA6C52CA4F2CF805D402997B7ADD6B57705032F7AEA99308B84C5A9D0FCB70BBD52FEA572F4064D19227C2E78D6ADF047DBB058AAD0A4CE4A457888C</electronicInvoiceHash>
		</invoiceOperation>
	</invoiceOperations>
</ManageInvoiceRequest>