import React, { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  TextField,
  Button,
  Chip,
  Stack,
  Pagination,
  Menu,
  MenuItem,
  FormControlLabel,
  Checkbox,
  Divider,
  InputAdornment,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  CircularProgress,
  Select,
  SelectChangeEvent,
  FormControl,
  InputLabel,
  Collapse,
  IconButton,
} from '@mui/material';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { hu } from 'date-fns/locale';
import { useNavigate } from 'react-router-dom';
import {
  Search as SearchIcon,
  FilterList as FilterIcon,
  Refresh as RefreshIcon,
  SwapHoriz,
  Add as AddIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  ChevronLeft as ChevronLeftIcon,
  ChevronRight as ChevronRightIcon,
  HourglassEmpty as UnpaidIcon,
  Schedule as PreparedIcon,
  CheckCircle as PaidIcon,
  Clear as ClearIcon,
  AddCircle as AddTrustedIcon,
  Verified as VerifiedIcon,
  TrendingDown as TrendingDownIcon,
  TrendingUp as TrendingUpIcon,
} from '@mui/icons-material';
import { useToastContext } from '../../context/ToastContext';
import { useBulkMarkUnpaid, useBulkMarkPrepared, useBulkMarkPaid } from '../../hooks/api';
import NAVInvoiceTable from './NAVInvoiceTable';
import InvoiceFilterMenu from './InvoiceFilterMenu';
import InvoiceBulkActionBar from './InvoiceBulkActionBar';
import InvoiceTotalsSection from './InvoiceTotalsSection';
import InvoiceDetailsModal from './InvoiceDetailsModal';
import { useInvoiceFilters } from '../../hooks/useInvoiceFilters';
import { useInvoiceData, Invoice } from '../../hooks/useInvoiceData';
import { useInvoiceDetails } from '../../hooks/useInvoiceDetails';
import { useInvoiceSelection } from '../../hooks/useInvoiceSelection';

interface InvoiceTotals {
  inbound: {
    net: number;
    vat: number;
    gross: number;
    count: number;
  };
  outbound: {
    net: number;
    vat: number;
    gross: number;
    count: number;
  };
  total: {
    net: number;
    vat: number;
    gross: number;
    count: number;
  };
}

const NAVInvoices: React.FC = () => {
  // Toast and navigation
  const { success: showSuccess, error: showError, addToast } = useToastContext();
  const navigate = useNavigate();

  // Bulk payment status update mutations
  const bulkMarkUnpaidMutation = useBulkMarkUnpaid();
  const bulkMarkPreparedMutation = useBulkMarkPrepared();
  const bulkMarkPaidMutation = useBulkMarkPaid();

  // Adapter functions to match hook interface signatures
  const adaptedAddToast = (type: string, title: string, message: string, duration?: number): void => {
    addToast(type as 'success' | 'error' | 'warning' | 'info', title, message, duration);
  };

  const adaptedBulkMarkUnpaidMutation = {
    mutateAsync: async (invoiceIds: number[]): Promise<void> => {
      await bulkMarkUnpaidMutation.mutateAsync(invoiceIds);
    },
    isPending: bulkMarkUnpaidMutation.isPending,
  };

  const adaptedBulkMarkPreparedMutation = {
    mutateAsync: async (invoiceIds: number[]): Promise<void> => {
      await bulkMarkPreparedMutation.mutateAsync(invoiceIds);
    },
    isPending: bulkMarkPreparedMutation.isPending,
  };

  const adaptedBulkMarkPaidMutation = {
    mutateAsync: async (data: unknown): Promise<void> => {
      await bulkMarkPaidMutation.mutateAsync(data as { invoice_ids?: number[]; payment_date?: string; invoices?: { invoice_id: number; payment_date: string }[] });
    },
    isPending: bulkMarkPaidMutation.isPending,
  };

  // Local state (pagination, UI)
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(20);
  const [sortField, setSortField] = useState<string>('issue_date');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');
  const [totalsCollapsed, setTotalsCollapsed] = useState(false);

  // Custom Hook 1: Filters
  const {
    searchTerm,
    setSearchTerm,
    directionFilter,
    setDirectionFilter,
    paymentStatusFilter,
    setPaymentStatusFilter,
    hideStornoInvoices,
    setHideStornoInvoices,
    inboundTransferFilter,
    setInboundTransferFilter,
    dateFilterType,
    dateFrom,
    setDateFrom,
    dateTo,
    setDateTo,
    filterAnchorEl,
    handleDateFilterTypeChange,
    applyDatePreset,
    navigateMonth,
    clearFilters,
    buildInvoiceQueryParams,
    handleFilterClick,
    handleFilterClose,
    filterMenuOpen,
  } = useInvoiceFilters();

  // Temporary selection state for useInvoiceData (cleared on filter changes)
  const [_tempSelectedInvoices, setTempSelectedInvoices] = useState<number[]>([]);

  // Build query params for data loading
  const queryParams = buildInvoiceQueryParams(currentPage, pageSize, sortField, sortDirection);

  // Custom Hook 2: Data Loading
  const { invoices, loading, totalCount, refetch } = useInvoiceData({
    queryParams,
    showError,
    setSelectedInvoices: setTempSelectedInvoices,
  });

  // Custom Hook 3: Details Modal
  const {
    selectedInvoice,
    invoiceDetailsOpen,
    invoiceLineItems,
    invoiceDetailsLoading,
    isSupplierTrusted,
    checkingTrustedStatus,
    addingTrustedPartner,
    handleViewInvoice,
    handleCloseInvoiceDetails,
    handleAddTrustedPartner,
  } = useInvoiceDetails({
    refetch,
    showSuccess,
    showError,
    bulkMarkPaidMutation: adaptedBulkMarkPaidMutation,
  });

  // Custom Hook 4: Selection & Bulk Operations
  const {
    selectedInvoices,
    paymentDate,
    setPaymentDate,
    usePaymentDueDate,
    setUsePaymentDueDate,
    handleSelectInvoice,
    handleSelectAll,
    handleBulkMarkUnpaid,
    handleBulkMarkPrepared,
    handleBulkMarkPaid,
    handleGenerateTransfers,
  } = useInvoiceSelection({
    invoices,
    refetch,
    showSuccess,
    showError,
    addToast: adaptedAddToast,
    navigate,
    bulkMarkUnpaidMutation: adaptedBulkMarkUnpaidMutation,
    bulkMarkPreparedMutation: adaptedBulkMarkPreparedMutation,
    bulkMarkPaidMutation: adaptedBulkMarkPaidMutation,
  });

  // Local formatting and calculation functions
  const handleSort = (field: string, direction: 'asc' | 'desc'): void => {
    setSortField(field);
    setSortDirection(direction);
    setCurrentPage(1);
  };

  // Calculate totals for selected or filtered invoices
  const calculateTotals = (): InvoiceTotals | null => {
    let invoicesToCalculate: Invoice[] = [];

    // If there are selected invoices, calculate totals for selected only
    if (selectedInvoices.length > 0) {
      invoicesToCalculate = invoices.filter((invoice) => selectedInvoices.includes(invoice.id));
    } else {
      // If no selection but there are filters active, calculate totals for all visible invoices
      const hasActiveFilters =
        (searchTerm !== null && searchTerm !== undefined && searchTerm !== '') ||
        (directionFilter !== null && directionFilter !== undefined && directionFilter !== '') ||
        (paymentStatusFilter !== null && paymentStatusFilter !== undefined && paymentStatusFilter !== '') ||
        !hideStornoInvoices ||
        inboundTransferFilter ||
        (dateFilterType !== null && dateFilterType !== undefined && dateFilterType !== '');
      if (hasActiveFilters) {
        invoicesToCalculate = invoices;
      }
    }

    // Initialize totals structure
    const totals = {
      inbound: { net: 0, vat: 0, gross: 0, count: 0 },
      outbound: { net: 0, vat: 0, gross: 0, count: 0 },
      total: { net: 0, vat: 0, gross: 0, count: 0 },
    };

    // Calculate sums by direction
    invoicesToCalculate.forEach((invoice) => {
      const net = Number(invoice.invoice_net_amount) || 0;
      const vat = Number(invoice.invoice_vat_amount) || 0;
      const gross = Number(invoice.invoice_gross_amount) || 0;

      if (invoice.invoice_direction === 'INBOUND') {
        totals.inbound.net += net;
        totals.inbound.vat += vat;
        totals.inbound.gross += gross;
        totals.inbound.count += 1;
      } else if (invoice.invoice_direction === 'OUTBOUND') {
        totals.outbound.net += net;
        totals.outbound.vat += vat;
        totals.outbound.gross += gross;
        totals.outbound.count += 1;
      }

      // Add to total regardless of direction
      totals.total.net += net;
      totals.total.vat += vat;
      totals.total.gross += gross;
      totals.total.count += 1;
    });

    return totals.total.count > 0 ? totals : null;
  };

  const totals = calculateTotals();

  // Consistent number formatting function - ensures spaces as thousand separators
  const formatNumber = (value: number | string | null): string => {
    if (value === null || value === undefined || value === '') return '-';

    const num = typeof value === 'string' ? parseFloat(value) : value;
    if (isNaN(num)) return '-';

    // Use Hungarian locale which uses spaces as thousand separators
    return num.toLocaleString('hu-HU', { maximumFractionDigits: 2 }).replace(/,00$/, '');
  };

  // Format amount helper function
  const formatAmount = (amount: number, currency: string): string => {
    if (currency === 'HUF') {
      return `${formatNumber(amount)} Ft`;
    }
    return `${formatNumber(amount)} ${currency}`;
  };

  const handlePageSizeChange = (event: SelectChangeEvent<number>): void => {
    setPageSize(Number(event.target.value));
    setCurrentPage(1);
  };

  const totalPages = Math.ceil(totalCount / pageSize);

  return (
    <Box
      sx={{
        p: { xs: 0.5, sm: 0.5, md: 1 },
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
      }}
    >
      {/* Header - Same pattern as BeneficiaryManager */}
      <Box sx={{ borderBottom: 1, borderColor: 'divider', pb: 1, mb: 1 }}>
        <Stack
          direction={{ xs: 'column', sm: 'row' }}
          justifyContent="space-between"
          alignItems={{ xs: 'flex-start', sm: 'center' }}
          spacing={2}
        >
          <Box>
            <Typography variant="h5" component="h1" fontWeight="bold" sx={{ mb: 0.5 }}>
              NAV Számlák
            </Typography>
            <Typography variant="body2" color="text.secondary">
              NAV-ból szinkronizált számlák megtekintése és keresése
            </Typography>
          </Box>
          <Stack direction="row" spacing={1}>
            <Button
              variant="outlined"
              startIcon={<RefreshIcon fontSize="small" />}
              onClick={refetch}
              disabled={loading}
              size="small"
              sx={{ fontSize: '0.7rem', py: 0.25, px: 0.75, minHeight: '28px' }}
            >
              Frissítés
            </Button>
          </Stack>
        </Stack>
      </Box>

      {/* Search and Filters - Same pattern as BeneficiaryManager */}
      <Box sx={{ mb: 1 }}>
        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={1} sx={{ mb: 1 }}>
          {/* Search */}
          <TextField
            fullWidth
            placeholder="Keresés számlaszám, név vagy adószám alapján..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon fontSize="small" />
                </InputAdornment>
              ),
            }}
            size="small"
            sx={{ '& .MuiInputBase-input': { fontSize: '0.8rem' } }}
          />

          {/* Filters */}
          <Button
            variant="outlined"
            startIcon={<FilterIcon fontSize="small" />}
            onClick={handleFilterClick}
            size="small"
            sx={{ minWidth: 120, fontSize: '0.7rem', py: 0.25, px: 0.75, minHeight: '28px' }}
          >
            Szűrők
          </Button>
          <Menu
            anchorEl={filterAnchorEl}
            open={filterMenuOpen}
            onClose={handleFilterClose}
            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
            transformOrigin={{ vertical: 'top', horizontal: 'right' }}
          >
            <MenuItem disableRipple sx={{ '&:hover': { backgroundColor: 'transparent' } }}>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={Boolean(directionFilter === 'INBOUND')}
                    onChange={(e) => setDirectionFilter(e.target.checked ? 'INBOUND' : '')}
                    size="small"
                  />
                }
                label="Csak bejövő számlák"
                sx={{ m: 0 }}
              />
            </MenuItem>
            <MenuItem disableRipple sx={{ '&:hover': { backgroundColor: 'transparent' } }}>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={Boolean(directionFilter === 'OUTBOUND')}
                    onChange={(e) => setDirectionFilter(e.target.checked ? 'OUTBOUND' : '')}
                    size="small"
                  />
                }
                label="Csak kimenő számlák"
                sx={{ m: 0 }}
              />
            </MenuItem>
            <Divider />
            <MenuItem disableRipple sx={{ '&:hover': { backgroundColor: 'transparent' } }}>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={Boolean(paymentStatusFilter === 'UNPAID')}
                    onChange={(e) => setPaymentStatusFilter(e.target.checked ? 'UNPAID' : '')}
                    size="small"
                  />
                }
                label="Csak fizetésre váró"
                sx={{ m: 0 }}
              />
            </MenuItem>
            <MenuItem disableRipple sx={{ '&:hover': { backgroundColor: 'transparent' } }}>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={Boolean(paymentStatusFilter === 'PREPARED')}
                    onChange={(e) => setPaymentStatusFilter(e.target.checked ? 'PREPARED' : '')}
                    size="small"
                  />
                }
                label="Csak előkészített"
                sx={{ m: 0 }}
              />
            </MenuItem>
            <MenuItem disableRipple sx={{ '&:hover': { backgroundColor: 'transparent' } }}>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={Boolean(paymentStatusFilter === 'PAID')}
                    onChange={(e) => setPaymentStatusFilter(e.target.checked ? 'PAID' : '')}
                    size="small"
                  />
                }
                label="Csak kifizetett"
                sx={{ m: 0 }}
              />
            </MenuItem>
            <Divider />
            <MenuItem disableRipple sx={{ '&:hover': { backgroundColor: 'transparent' } }}>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={Boolean(hideStornoInvoices)}
                    onChange={(e) => setHideStornoInvoices(e.target.checked)}
                    size="small"
                  />
                }
                label="Sztornózott számlák elrejtése"
                sx={{ m: 0 }}
              />
            </MenuItem>
            <Divider />
            <MenuItem
              onClick={() => {
                clearFilters();
                handleFilterClose();
              }}
            >
              Szűrők törlése
            </MenuItem>
          </Menu>
        </Stack>

        {/* Quick Filter Buttons */}
        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={1} sx={{ mt: 0.5 }}>
          <Button
            variant={inboundTransferFilter ? 'contained' : 'outlined'}
            color="primary"
            size="small"
            onClick={() => {
              setInboundTransferFilter(!inboundTransferFilter);
              // Clear other direction filters when this is active
              if (!inboundTransferFilter) {
                setDirectionFilter('');
              }
            }}
            startIcon={<SwapHoriz fontSize="small" />}
            sx={{ fontSize: '0.7rem', py: 0.25, px: 0.75, minHeight: '28px' }}
          >
            Bejövő átutalások
          </Button>

          {/* Date Interval Filter */}
          <Stack direction="row" spacing={0.5} alignItems="center">
            <FormControl size="small" sx={{ minWidth: 120 }}>
              <InputLabel sx={{ fontSize: '0.8rem' }}>Dátum típus</InputLabel>
              <Select
                value={dateFilterType}
                label="Dátum típus"
                onChange={(e) =>
                  handleDateFilterTypeChange(
                    e.target.value as 'issue_date' | 'fulfillment_date' | 'payment_due_date' | ''
                  )
                }
                sx={{ fontSize: '0.8rem' }}
              >
                <MenuItem value="" sx={{ fontSize: '0.8rem' }}>
                  Nincs
                </MenuItem>
                <MenuItem value="issue_date" sx={{ fontSize: '0.8rem' }}>
                  Kiállítás
                </MenuItem>
                <MenuItem value="fulfillment_date" sx={{ fontSize: '0.8rem' }}>
                  Teljesítés
                </MenuItem>
                <MenuItem value="payment_due_date" sx={{ fontSize: '0.8rem' }}>
                  Fizetési határidő
                </MenuItem>
              </Select>
            </FormControl>

            {dateFilterType && (
              <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={hu}>
                <Stack direction="row" spacing={0.5} alignItems="center">
                  <TextField
                    label="Dátum-tól"
                    type="date"
                    size="small"
                    value={dateFrom}
                    onChange={(e) => setDateFrom(e.target.value)}
                    InputLabelProps={{ shrink: true }}
                    sx={{
                      minWidth: 120,
                      '& .MuiInputLabel-root': { fontSize: '0.8rem' },
                      '& .MuiInputBase-input': { fontSize: '0.8rem' },
                    }}
                  />
                  <TextField
                    label="Dátum-ig"
                    type="date"
                    size="small"
                    value={dateTo}
                    onChange={(e) => setDateTo(e.target.value)}
                    InputLabelProps={{ shrink: true }}
                    sx={{
                      minWidth: 120,
                      '& .MuiInputLabel-root': { fontSize: '0.8rem' },
                      '& .MuiInputBase-input': { fontSize: '0.8rem' },
                    }}
                  />

                  {/* Month Navigation Stepper */}
                  <Stack direction="row" spacing={0.25} alignItems="center">
                    <IconButton
                      size="small"
                      onClick={() => navigateMonth('previous')}
                      sx={{
                        border: '1px solid',
                        borderColor: 'primary.main',
                        borderRadius: 1,
                        p: 0.25,
                        '&:hover': { bgcolor: 'primary.50' },
                        '& .MuiSvgIcon-root': { fontSize: 16 },
                      }}
                    >
                      <ChevronLeftIcon />
                    </IconButton>

                    <Button
                      size="small"
                      variant="contained"
                      onClick={() => applyDatePreset('current')}
                      sx={{
                        whiteSpace: 'nowrap',
                        fontSize: '0.7rem',
                        minWidth: '80px',
                        py: 0.25,
                        px: 0.75,
                        minHeight: '28px',
                      }}
                    >
                      Aktuális hónap
                    </Button>

                    <IconButton
                      size="small"
                      onClick={() => navigateMonth('next')}
                      sx={{
                        border: '1px solid',
                        borderColor: 'primary.main',
                        borderRadius: 1,
                        p: 0.25,
                        '&:hover': { bgcolor: 'primary.50' },
                        '& .MuiSvgIcon-root': { fontSize: 16 },
                      }}
                    >
                      <ChevronRightIcon />
                    </IconButton>
                  </Stack>
                </Stack>
              </LocalizationProvider>
            )}
          </Stack>
        </Stack>

        {/* Active filters display - Same pattern as BeneficiaryManager */}
        {(searchTerm ||
          directionFilter ||
          paymentStatusFilter ||
          !hideStornoInvoices ||
          inboundTransferFilter ||
          dateFilterType) && (
          <Stack direction="row" spacing={1} alignItems="center" flexWrap="wrap" sx={{ mt: 2 }}>
            <Typography variant="body2" color="text.secondary">
              Aktív szűrők:
            </Typography>
            {searchTerm && (
              <Chip
                label={`Keresés: ${searchTerm}`}
                size="small"
                color="primary"
                variant="outlined"
              />
            )}
            {directionFilter && (
              <Chip
                label={directionFilter === 'INBOUND' ? 'Bejövő' : 'Kimenő'}
                size="small"
                color="success"
                variant="outlined"
              />
            )}
            {paymentStatusFilter && (
              <Chip
                label={
                  paymentStatusFilter === 'UNPAID'
                    ? 'Fizetésre vár'
                    : paymentStatusFilter === 'PREPARED'
                      ? 'Előkészítve'
                      : 'Kifizetve'
                }
                size="small"
                color="info"
                variant="outlined"
              />
            )}
            {inboundTransferFilter && (
              <Chip label="Bejövő átutalások" size="small" color="primary" variant="outlined" />
            )}
            {!hideStornoInvoices && (
              <Chip
                label="Sztornózott számlák láthatóak"
                size="small"
                color="error"
                variant="outlined"
              />
            )}
            {dateFilterType && (dateFrom || dateTo) && (
              <Chip
                label={`${
                  dateFilterType === 'issue_date'
                    ? 'Kiállítás'
                    : dateFilterType === 'fulfillment_date'
                      ? 'Teljesítés'
                      : 'Fizetési határidő'
                }: ${
                  dateFrom && dateTo
                    ? `${dateFrom} - ${dateTo}`
                    : dateFrom
                      ? `${dateFrom}-tól`
                      : `${dateTo}-ig`
                }`}
                size="small"
                color="secondary"
                variant="outlined"
              />
            )}
            <Button
              variant="outlined"
              size="small"
              startIcon={<ClearIcon fontSize="small" />}
              onClick={clearFilters}
              sx={{ ml: 0.5, fontSize: '0.7rem', py: 0.25, px: 0.75, minHeight: '28px' }}
            >
              Összes szűrő törlése
            </Button>
          </Stack>
        )}
      </Box>

      {/* Results count - Same pattern as BeneficiaryManager */}
      <Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ mb: 0.5 }}>
        <Typography variant="body2" color="text.secondary">
          {totalCount} számla találat
        </Typography>
        {selectedInvoices.length > 0 && (
          <Typography variant="body2" color="primary.main" sx={{ fontWeight: 'medium' }}>
            {selectedInvoices.length} kijelölve
          </Typography>
        )}
      </Stack>

      {/* Totals Summary Card */}
      {totals && (
        <Paper
          elevation={1}
          sx={{
            p: 1,
            mb: 0.5,
            bgcolor: 'primary.50',
            border: '1px solid',
            borderColor: 'primary.200',
          }}
        >
          <Stack spacing={0.5}>
            {/* Header with collapse button */}
            <Stack
              direction="row"
              alignItems="center"
              justifyContent="space-between"
              sx={{ minHeight: '24px' }}
            >
              <Typography
                variant="caption"
                color="text.secondary"
                sx={{ fontSize: '0.7rem', fontWeight: 'medium' }}
              >
                {selectedInvoices.length > 0
                  ? `${selectedInvoices.length} kiválasztott számla összesen:`
                  : `${totals.total.count} szűrt számla összesen:`}
              </Typography>
              <IconButton
                size="small"
                onClick={() => setTotalsCollapsed(!totalsCollapsed)}
                sx={{ p: 0.25, '& .MuiSvgIcon-root': { fontSize: 16 } }}
              >
                {totalsCollapsed ? <ExpandMoreIcon /> : <ExpandLessIcon />}
              </IconButton>
            </Stack>

            {/* Collapsible direction-specific totals - Compact Table Design */}
            <Collapse in={!totalsCollapsed}>
              <Box
                sx={{
                  border: '1px solid',
                  borderColor: 'divider',
                  borderRadius: 1,
                  overflow: 'hidden',
                  mt: 0.5,
                }}
              >
                {/* Table Header */}
                <Box
                  sx={{
                    display: 'grid',
                    gridTemplateColumns: '100px 1fr 1fr 1fr',
                    gap: 0.5,
                    bgcolor: 'grey.50',
                    p: 0.5,
                    borderBottom: '1px solid',
                    borderBottomColor: 'divider',
                  }}
                >
                  <Typography variant="caption" sx={{ fontWeight: 'bold', fontSize: '0.65rem' }}>
                    Irány
                  </Typography>
                  <Typography
                    variant="caption"
                    sx={{ fontWeight: 'bold', fontSize: '0.65rem', textAlign: 'center' }}
                  >
                    Nettó
                  </Typography>
                  <Typography
                    variant="caption"
                    sx={{ fontWeight: 'bold', fontSize: '0.65rem', textAlign: 'center' }}
                  >
                    ÁFA
                  </Typography>
                  <Typography
                    variant="caption"
                    sx={{ fontWeight: 'bold', fontSize: '0.65rem', textAlign: 'center' }}
                  >
                    Bruttó
                  </Typography>
                </Box>

                {/* Outbound Row */}
                {totals.outbound.count > 0 && (
                  <Box
                    sx={{
                      display: 'grid',
                      gridTemplateColumns: '100px 1fr 1fr 1fr',
                      gap: 0.5,
                      p: 0.5,
                      borderBottom: totals.inbound.count > 0 ? '1px solid' : 'none',
                      borderBottomColor: 'divider',
                      '&:hover': { bgcolor: 'action.hover' },
                    }}
                  >
                    <Typography
                      variant="caption"
                      color="primary.main"
                      sx={{ fontSize: '0.65rem', fontWeight: 'medium' }}
                    >
                      Kimenő ({totals.outbound.count})
                    </Typography>
                    <Typography
                      variant="caption"
                      sx={{
                        fontSize: '0.65rem',
                        textAlign: 'center',
                        color: 'success.main',
                        fontWeight: 'medium',
                      }}
                    >
                      {formatAmount(totals.outbound.net, 'HUF')}
                    </Typography>
                    <Typography
                      variant="caption"
                      sx={{
                        fontSize: '0.65rem',
                        textAlign: 'center',
                        color: 'warning.main',
                        fontWeight: 'medium',
                      }}
                    >
                      {formatAmount(totals.outbound.vat, 'HUF')}
                    </Typography>
                    <Typography
                      variant="caption"
                      sx={{
                        fontSize: '0.65rem',
                        textAlign: 'center',
                        color: 'primary.main',
                        fontWeight: 'bold',
                      }}
                    >
                      {formatAmount(totals.outbound.gross, 'HUF')}
                    </Typography>
                  </Box>
                )}

                {/* Inbound Row */}
                {totals.inbound.count > 0 && (
                  <Box
                    sx={{
                      display: 'grid',
                      gridTemplateColumns: '100px 1fr 1fr 1fr',
                      gap: 0.5,
                      p: 0.5,
                      '&:hover': { bgcolor: 'action.hover' },
                    }}
                  >
                    <Typography
                      variant="caption"
                      color="secondary.main"
                      sx={{ fontSize: '0.65rem', fontWeight: 'medium' }}
                    >
                      Bejövő ({totals.inbound.count})
                    </Typography>
                    <Typography
                      variant="caption"
                      sx={{
                        fontSize: '0.65rem',
                        textAlign: 'center',
                        color: 'success.main',
                        fontWeight: 'medium',
                      }}
                    >
                      {formatAmount(totals.inbound.net, 'HUF')}
                    </Typography>
                    <Typography
                      variant="caption"
                      sx={{
                        fontSize: '0.65rem',
                        textAlign: 'center',
                        color: 'warning.main',
                        fontWeight: 'medium',
                      }}
                    >
                      {formatAmount(totals.inbound.vat, 'HUF')}
                    </Typography>
                    <Typography
                      variant="caption"
                      sx={{
                        fontSize: '0.65rem',
                        textAlign: 'center',
                        color: 'secondary.main',
                        fontWeight: 'bold',
                      }}
                    >
                      {formatAmount(totals.inbound.gross, 'HUF')}
                    </Typography>
                  </Box>
                )}
              </Box>
            </Collapse>
          </Stack>
        </Paper>
      )}

      {/* Action buttons for selected invoices */}
      {selectedInvoices.length > 0 && (
        <Paper elevation={1} sx={{ p: 1, mb: 0.5, backgroundColor: 'action.hover' }}>
          <Typography
            variant="caption"
            sx={{
              mb: 0.5,
              color: 'primary.main',
              fontWeight: 'medium',
              fontSize: '0.75rem',
              display: 'block',
            }}
          >
            Tömeges műveletek ({selectedInvoices.length} számla)
          </Typography>

          <Stack direction="row" spacing={0.5} alignItems="center" flexWrap="wrap" useFlexGap>
            <Button
              variant="contained"
              color="primary"
              size="small"
              startIcon={<AddIcon fontSize="small" />}
              onClick={handleGenerateTransfers}
              sx={{ fontSize: '0.7rem', py: 0.25, px: 0.75, minHeight: '28px' }}
            >
              Utalás generálás
            </Button>

            <Button
              variant="outlined"
              color="warning"
              size="small"
              startIcon={<UnpaidIcon fontSize="small" />}
              onClick={handleBulkMarkUnpaid}
              disabled={bulkMarkUnpaidMutation.isPending}
              sx={{ fontSize: '0.7rem', py: 0.25, px: 0.75, minHeight: '28px' }}
            >
              Fizetésre vár
            </Button>

            <Button
              variant="outlined"
              color="info"
              size="small"
              startIcon={<PreparedIcon fontSize="small" />}
              onClick={handleBulkMarkPrepared}
              disabled={bulkMarkPreparedMutation.isPending}
              sx={{ fontSize: '0.7rem', py: 0.25, px: 0.75, minHeight: '28px' }}
            >
              Előkészítve
            </Button>

            <FormControlLabel
              control={
                <Checkbox
                  checked={Boolean(usePaymentDueDate)}
                  onChange={(e) => setUsePaymentDueDate(e.target.checked)}
                  size="small"
                  sx={{ '& .MuiSvgIcon-root': { fontSize: 16 } }}
                />
              }
              label="Fizetési határidő"
              sx={{
                fontSize: '0.7rem',
                mx: 0.5,
                '& .MuiFormControlLabel-label': { fontSize: '0.7rem' },
              }}
            />

            {!usePaymentDueDate && (
              <TextField
                label="Dátum"
                type="date"
                value={paymentDate}
                onChange={(e) => setPaymentDate(e.target.value)}
                size="small"
                sx={{
                  minWidth: '120px',
                  '& .MuiInputBase-input': { fontSize: '0.7rem', py: 0.5 },
                  '& .MuiInputLabel-root': { fontSize: '0.7rem' },
                }}
                InputLabelProps={{ shrink: true }}
              />
            )}

            <Button
              variant="outlined"
              color="success"
              size="small"
              startIcon={<PaidIcon fontSize="small" />}
              onClick={handleBulkMarkPaid}
              disabled={bulkMarkPaidMutation.isPending}
              sx={{ fontSize: '0.7rem', py: 0.25, px: 0.75, minHeight: '28px' }}
            >
              Kifizetve
            </Button>
          </Stack>
        </Paper>
      )}

      {/* Table - Same pattern as BeneficiaryManager */}
      <Paper
        elevation={1}
        sx={{ flexGrow: 1, overflow: 'hidden', display: 'flex', flexDirection: 'column' }}
      >
        <NAVInvoiceTable
          invoices={invoices}
          isLoading={loading}
          onView={handleViewInvoice}
          onSort={handleSort}
          sortField={sortField}
          sortDirection={sortDirection}
          showStornoColumn={!hideStornoInvoices}
          selectedInvoices={selectedInvoices}
          onSelectInvoice={handleSelectInvoice}
          onSelectAll={handleSelectAll}
        />
      </Paper>

      {/* Pagination with Page Size Selector */}
      {totalPages > 1 && (
        <Box
          sx={{
            mt: 1,
            p: 1,
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
          }}
        >
          <Stack direction="row" spacing={2} alignItems="center">
            <Typography variant="body2" color="text.secondary">
              Oldal {currentPage} / {totalPages}
            </Typography>
            <FormControl size="small" sx={{ minWidth: '80px' }}>
              <InputLabel id="page-size-select-label">Méret</InputLabel>
              <Select
                labelId="page-size-select-label"
                value={pageSize}
                label="Méret"
                onChange={handlePageSizeChange}
                size="small"
              >
                <MenuItem value={10}>10</MenuItem>
                <MenuItem value={20}>20</MenuItem>
                <MenuItem value={50}>50</MenuItem>
                <MenuItem value={100}>100</MenuItem>
                <MenuItem value={200}>200</MenuItem>
                <MenuItem value={500}>500</MenuItem>
              </Select>
            </FormControl>
            <Typography variant="body2" color="text.secondary">
              elemek oldalanként
            </Typography>
          </Stack>
          <Pagination
            count={totalPages}
            page={currentPage}
            onChange={(_event, page) => setCurrentPage(page)}
            color="primary"
            size="small"
          />
        </Box>
      )}

      {/* Invoice Details Dialog */}
      <Dialog open={invoiceDetailsOpen} onClose={handleCloseInvoiceDetails} maxWidth="lg" fullWidth>
        <DialogTitle>
          <Box
            sx={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              width: '100%',
            }}
          >
            <Typography variant="h6" component="span">
              Számla részletei: {(selectedInvoice?.nav_invoice_number !== null && selectedInvoice?.nav_invoice_number !== undefined && selectedInvoice?.nav_invoice_number !== '') ? selectedInvoice.nav_invoice_number : 'Betöltés...'}
            </Typography>
            {selectedInvoice !== null && selectedInvoice !== undefined && (
              <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
                {/* Direction Badge - same style as in the list */}
                <Chip
                  label={selectedInvoice.invoice_direction_display}
                  color={selectedInvoice.invoice_direction === 'INBOUND' ? 'secondary' : 'primary'}
                  size="small"
                  variant="outlined"
                  icon={
                    selectedInvoice.invoice_direction === 'INBOUND' ? (
                      <TrendingDownIcon />
                    ) : (
                      <TrendingUpIcon />
                    )
                  }
                />
                {selectedInvoice.invoice_operation === 'STORNO' && (
                  <Chip
                    label="Stornó"
                    color="error"
                    size="small"
                    variant="filled"
                    sx={{ height: 24, fontSize: '0.75rem' }}
                  />
                )}
              </Box>
            )}
          </Box>
        </DialogTitle>
        <DialogContent>
          {invoiceDetailsLoading ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
              <CircularProgress />
            </Box>
          ) : (
            selectedInvoice && (
              <Box>
                {/* Compact Partners Section - Clean two-column like invoice */}
                <Stack direction="row" spacing={2} sx={{ mb: 2 }}>
                  {/* Supplier Column */}
                  {selectedInvoice.supplier_name !== null && selectedInvoice.supplier_name !== undefined && selectedInvoice.supplier_name !== '' && (
                    <Box
                      sx={{
                        flex: 1,
                        borderRight: (selectedInvoice.customer_name !== null && selectedInvoice.customer_name !== undefined && selectedInvoice.customer_name !== '') ? '1px solid #e0e0e0' : 'none',
                        pr: (selectedInvoice.customer_name !== null && selectedInvoice.customer_name !== undefined && selectedInvoice.customer_name !== '') ? 2 : 0,
                      }}
                    >
                      <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 1 }}>
                        Eladó: {selectedInvoice.supplier_name}
                      </Typography>
                      {selectedInvoice.supplier_tax_number !== null && selectedInvoice.supplier_tax_number !== undefined && selectedInvoice.supplier_tax_number !== '' && (
                        <Typography variant="body2" sx={{ mb: 0.3, fontSize: '0.875rem' }}>
                          Magyar adószám: {selectedInvoice.supplier_tax_number}
                        </Typography>
                      )}
                      {selectedInvoice.supplier_bank_account_number !== null && selectedInvoice.supplier_bank_account_number !== undefined && selectedInvoice.supplier_bank_account_number !== '' && (
                        <Typography variant="body2" sx={{ mb: 0.3, fontSize: '0.875rem' }}>
                          Bankszámlaszám: {selectedInvoice.supplier_bank_account_number}
                        </Typography>
                      )}

                      {/* Trusted Partner Status - Compact */}
                      <Box sx={{ mt: 1 }}>
                        {checkingTrustedStatus ? (
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <CircularProgress size={14} />
                            <Typography variant="caption" color="text.secondary">
                              Ellenőrzés...
                            </Typography>
                          </Box>
                        ) : isSupplierTrusted ? (
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <VerifiedIcon color="success" fontSize="small" />
                            <Typography
                              variant="caption"
                              color="success.main"
                              sx={{ fontWeight: 'medium' }}
                            >
                              Megbízható partner
                            </Typography>
                          </Box>
                        ) : (
                          selectedInvoice.supplier_tax_number !== null && selectedInvoice.supplier_tax_number !== undefined && selectedInvoice.supplier_tax_number !== '' && (
                            <Button
                              variant="outlined"
                              size="small"
                              startIcon={<AddTrustedIcon />}
                              onClick={handleAddTrustedPartner}
                              disabled={addingTrustedPartner}
                              sx={{ fontSize: '0.75rem', py: 0.5, px: 1 }}
                            >
                              {addingTrustedPartner ? 'Hozzáadás...' : 'Megbízható partner'}
                            </Button>
                          )
                        )}
                      </Box>
                    </Box>
                  )}

                  {/* Customer Column */}
                  {selectedInvoice.customer_name !== null && selectedInvoice.customer_name !== undefined && selectedInvoice.customer_name !== '' && (
                    <Box sx={{ flex: 1 }}>
                      <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 1 }}>
                        Vevő: {selectedInvoice.customer_name}
                      </Typography>
                      {selectedInvoice.customer_tax_number !== null && selectedInvoice.customer_tax_number !== undefined && selectedInvoice.customer_tax_number !== '' && (
                        <Typography variant="body2" sx={{ mb: 0.3, fontSize: '0.875rem' }}>
                          Magyar adószám: {selectedInvoice.customer_tax_number}
                        </Typography>
                      )}
                      {selectedInvoice.customer_bank_account_number !== null && selectedInvoice.customer_bank_account_number !== undefined && selectedInvoice.customer_bank_account_number !== '' && (
                        <Typography variant="body2" sx={{ mb: 0.3, fontSize: '0.875rem' }}>
                          Bankszámlaszám: {selectedInvoice.customer_bank_account_number}
                        </Typography>
                      )}
                    </Box>
                  )}
                </Stack>

                {/* Compact Details Row - Essential dates only */}
                <Box sx={{ borderTop: '1px solid #e0e0e0', pt: 1.5, mb: 2 }}>
                  <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} sx={{ mb: 1 }}>
                    <Typography
                      variant="body2"
                      sx={{ fontWeight: 'bold', minWidth: 'fit-content' }}
                    >
                      Teljesítés:{' '}
                      {(selectedInvoice.fulfillment_date_formatted !== null && selectedInvoice.fulfillment_date_formatted !== undefined && selectedInvoice.fulfillment_date_formatted !== '') ?
                        selectedInvoice.fulfillment_date_formatted :
                        selectedInvoice.issue_date_formatted}
                    </Typography>
                    <Typography
                      variant="body2"
                      sx={{ fontWeight: 'bold', minWidth: 'fit-content' }}
                    >
                      Keltezés: {selectedInvoice.issue_date_formatted}
                    </Typography>
                    <Typography
                      variant="body2"
                      sx={{ fontWeight: 'bold', minWidth: 'fit-content' }}
                    >
                      Fizetési határidő: {(selectedInvoice.payment_due_date_formatted !== null && selectedInvoice.payment_due_date_formatted !== undefined && selectedInvoice.payment_due_date_formatted !== '') ? selectedInvoice.payment_due_date_formatted : 'N/A'}
                    </Typography>
                    {selectedInvoice.original_invoice_number !== null && selectedInvoice.original_invoice_number !== undefined && selectedInvoice.original_invoice_number !== '' && (
                      <Typography
                        variant="body2"
                        sx={{ fontWeight: 'bold', minWidth: 'fit-content' }}
                      >
                        Eredeti szám: {selectedInvoice.original_invoice_number}
                      </Typography>
                    )}
                  </Stack>
                </Box>

                {/* Compact Summary Section */}
                <Box sx={{ backgroundColor: '#f9f9f9', p: 1.5, borderRadius: 1, mb: 2 }}>
                  <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 1 }}>
                    Számla összesítő:
                  </Typography>

                  <Stack
                    direction="row"
                    justifyContent="space-between"
                    alignItems="center"
                    spacing={2}
                  >
                    <Stack spacing={0.5} sx={{ flex: 1 }}>
                      {selectedInvoice.invoice_net_amount !== null && selectedInvoice.invoice_net_amount !== undefined && (
                        <Stack direction="row" justifyContent="space-between">
                          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                            Számla nettó értéke
                          </Typography>
                          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                            {formatNumber(selectedInvoice.invoice_net_amount)} Ft
                          </Typography>
                        </Stack>
                      )}
                      {selectedInvoice.invoice_vat_amount !== null && selectedInvoice.invoice_vat_amount !== undefined && (
                        <Stack direction="row" justifyContent="space-between">
                          <Typography variant="body2">Áfa összege</Typography>
                          <Typography variant="body2">
                            {formatNumber(selectedInvoice.invoice_vat_amount)} Ft
                          </Typography>
                        </Stack>
                      )}
                      <Stack
                        direction="row"
                        justifyContent="space-between"
                        sx={{ borderTop: '1px solid #ddd', pt: 0.5 }}
                      >
                        <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                          Számla bruttó végösszege
                        </Typography>
                        <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                          {formatNumber(selectedInvoice.invoice_gross_amount)} Ft
                        </Typography>
                      </Stack>
                    </Stack>
                  </Stack>
                </Box>

                <Box>
                  <Typography variant="subtitle1" sx={{ mt: 2, mb: 1, fontWeight: 'bold' }}>
                    Számla tételek
                  </Typography>
                  {invoiceLineItems.length > 0 ? (
                    <TableContainer>
                      <Table size="small">
                        <TableHead>
                          <TableRow>
                            <TableCell>Sor</TableCell>
                            <TableCell>Megnevezés</TableCell>
                            <TableCell align="right">Mennyiség</TableCell>
                            <TableCell align="right">Egységár</TableCell>
                            <TableCell align="right">Nettó</TableCell>
                            <TableCell align="right">ÁFA %</TableCell>
                            <TableCell align="right">ÁFA összeg</TableCell>
                            <TableCell align="right">Bruttó</TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {invoiceLineItems.map((item) => (
                            <TableRow key={item.id}>
                              <TableCell>{item.line_number}</TableCell>
                              <TableCell>{item.line_description}</TableCell>
                              <TableCell align="right">
                                {(item.quantity !== null && item.quantity !== undefined) ? `${item.quantity} ${item.unit_of_measure}` : '-'}
                              </TableCell>
                              <TableCell align="right">{formatNumber(item.unit_price)}</TableCell>
                              <TableCell align="right">
                                {formatNumber(item.line_net_amount)}
                              </TableCell>
                              <TableCell align="right">
                                {(item.vat_rate !== null && item.vat_rate !== undefined) ? `${formatNumber(item.vat_rate)}%` : '-'}
                              </TableCell>
                              <TableCell align="right">
                                {formatNumber(item.line_vat_amount)}
                              </TableCell>
                              <TableCell align="right">
                                {formatNumber(item.line_gross_amount)}
                              </TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </TableContainer>
                  ) : (
                    <Alert severity="info">Nincsenek részletes tételek</Alert>
                  )}
                </Box>
              </Box>
            )
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseInvoiceDetails}>Bezárás</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default NAVInvoices;
